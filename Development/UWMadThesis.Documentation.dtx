%   \iffalse
%<*PROTECT>
%   \fi
%   \iffalse
\documentclass{UWMadThesisL3Doc}
%
    % \usepackage[english]{babel}

    \ExplSyntaxOn
    \DeclareDocumentCommand \LaTeXPL { } {
        \texttt{expl3}
    }
    \ExplSyntaxOff

   \Title{UWMadThesis Manual}
   \Author{Troy Christopher Haskin}

    \begin{document}
        \DocInput{\jobname.dtx}
    \end{document}
%
%
%   \fi
%
%
% \CheckSum{0}
%
%   \CharacterTable
%   {Upper-case \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%    Lower-case \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%    Digits     \0\1\2\3\4\5\6\7\8\9
%    Exclamation   \!    Double quote \"     Hash (number) \#
%    Dollar        \$    Percent      \%     Ampersand     \&
%    Acute accent  \'    Left paren   \(     Right paren   \)
%    Asterisk      \*    Plus         \+     Comma         \,
%    Minus         \-    Point        \.     Solidus       \/
%    Colon         \:    Semicolon    \;     Less than     \<
%    Equals        \=    Greater than \>     Question mark \?
%    Commercial at \@    Left bracket \[     Backslash     \\
%    Right bracket \]    Circumflex   \^     Underscore    \_
%    Grave accent  \`    Left brace   \{     Vertical bar  \|
%    Right brace   \}    Tilde \~}
%
%
%   \UWPart{User Guide}
%   \input{UWMadThesis.Documentation.UserGuide.dtx}
%   \GetFileInfo{UWMadThesis.cls}
%   \StopEventually{}
%
%
%
%
%
%
%^^A ==================================================== !
%^^A                                                      !
%^^A                    BEGIN IMPLEMENTATION              !
%^^A                                                      !
%^^A ==================================================== !
%
%   \iffalse
%</PROTECT>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWPart{Implementation}
%   \UWModule{Front Matter}
%
%   Much of this class is written using the \LaTeX3 Programming Layer;
%   this will be denoted as \LaTeXPL{}.  The \LaTeXPL{} is the first
%   piece of a new system designed to succeed \LaTeXe{} in the future.
%   However, while the programming layer is solid and remarkable,
%   a lot of presentation work still needs to be done.  Therefore,
%   this class uses \LaTeXe{} code where necessary and will hopefully
%   be slowly pulled out as needed.  The good news is that since everything
%   is more-or-less an abstraction of \TeX{}, it should work together well.
%
%   \UWSubModule{expl3 Package and Identification}
%   The |expl3| package loads the \LaTeXPL{} and is therefore required.
%   If the package is not recent enough, the class aborts and requests
%   the user update.
%    \begin{macrocode}
\RequirePackage{expl3}[2013/07/28]
\@ifpackagelater{expl3}{2013/07/28} {} {%
    \PackageError{UWMadThesis}{Version of l3kernel is too old}
      {%
        Please install an up to date version of l3kernel\MessageBreak
        using your TeX package manager or from CTAN.
      }%
    \endinput
}%
%    \end{macrocode}
%
%   Assuming the the |expl3| package is recent enough, we provide the class
%   using the \LaTeXPL{}'s provide function.
%    \begin{macrocode}
\ProvidesExplClass
    {UWMadThesis}{2013/08/21}{1.0}{LaTeX2e+~Thesis~Class~for~UW-Madison}
%    \end{macrocode}
%
%
%   \UWSubModule{Identification and Defaults}
%
%   Now, we define some identification variables (token lists).
%    \begin{macrocode}
\tl_const:Nn \c_UWMad_ClassName_tl        {UWMadThesis}
\tl_const:Nn \c_UWMad_UniversityLong_tl   {University~of~Wisconsin-Madison}
\tl_const:Nn \c_UWMad_UniversityShort_tl  {UW-Madison}
\tl_const:Nn \c_UWMad_ClassVersion_tl     {1.0}
\tl_const:Nn \c_UWMad_ClassVersionDate_tl {2012/01/09}
%    \end{macrocode}
%
%   And since these identifications may be desired in typsetting more,
%   where \LaTeXPL{}'s syntax will be turned off, we define some aliases.
%    \begin{macrocode}
\cs_new_eq:NN \UWMadClassName    \c_UWMad_ClassName_tl
\cs_new_eq:NN \UWMadClass        \c_UWMad_ClassName_tl
\cs_new_eq:NN \UWMadLong         \c_UWMad_UniversityLong_tl
\cs_new_eq:NN \UWMadShort        \c_UWMad_UniversityShort_tl
\cs_new_eq:NN \UWMadClassVersion \c_UWMad_ClassVersion_tl
\cs_new_eq:NN \UWMadClassDate    \c_UWMad_ClassVersionDate_tl
%    \end{macrocode}
%
%   In an effort to allow the thesis class to adapt to new underlying classes,
%   the class that \UWMadClassName{} loads is decalred as a mutable
%   token list.  The default is the \LaTeX{} base class |report|.
%    \begin{macrocode}
\tl_new:N   \g_UWMad_ParentClass_tl
\tl_gset:Nn \g_UWMad_ParentClass_tl {report}
%    \end{macrocode}
%
%
%
%   \UWSubModule{Options}
%
%   First, a command is created to throw a warning if an option that
%   violates \UWMadLong{}'s dissertation guidelines.
%    \begin{macrocode}
\msg_new:nnn{UWMadThesis}{Options/StyleViolation}{
    Option~'#1'~violates~\c_UWMadUniversityShort_tl{}~
    Dissertation~Guidelines;~consider~omission
}
\cs_new:Nn \__UWMad_FrontMatter_StyleWarning:n {
    \msg_warning{UWMadThesis}{Options/StyleViolation}
        {#1}
   \PassOptionsToClass{#1}{\g_UWMad_ParentClass_tl}
}
%    \end{macrocode}
%
%   This command is used to suppress warning issued from
%   \UWMadClass{}. The first argument is a coonditional that
%   would normally determine if a warning were to be thrown, but the
%   decision is now superceeded by a switch to determine if warnings
%   are disabled or not.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ThrowWarnings:NTF {
    \bool_if:NTF \g__UWMad_ThrowWarnings_bool {
        \bool_if:NTF #1 {
            #2
        } {
            #3
        }
    } {}
}
\cs_new:Nn \__UWMad_ThrowWarnings:TF {
    \bool_if:NTF \g__UWMad_ThrowWarnings_bool {
        #1
    } {
        #2
    }
}
%    \end{macrocode}
%
%   Now, declare booleans for the option processing.  All new booleans
%   are false by default.
%    \begin{macrocode}
\bool_new:N       \g__UWMad_MathTweaks_bool
\bool_gset_true:N \g__UWMad_MathTweaks_bool
\bool_new:N       \g__UWMad_ThrowWarnings_bool
\bool_gset_true:N \g__UWMad_ThrowWarnings_bool
\bool_new:N       \g__UWMad_Hyperlinks_bool
\bool_gset_true:N \g__UWMad_Hyperlinks_bool
%    \end{macrocode}
%
%   Declare the options.
%    \begin{macrocode}
\DeclareOption{NoMath} {
    \bool_gset_false:N \g__UWMad_MathTweaks_bool
}
\DeclareOption{NoLinks} {
    \bool_gset_false:N \g__UWMad_Hyperlinks_bool
}
\DeclareOption{Quiet} {
    \bool_gset_false:N \g__UWMad_ThrowWarnings_bool
}
%    \end{macrocode}
%
%   Catch the couple of default options that violate the requirements:
%   8.5 by 11 paper for single-sided printing.
%    \begin{macrocode}
\DeclareOption{a4paper} {
    \__UWMad_ThrowWarnings:TF {
        \__UWMad_FrontMatter_StyleWarning:n {\CurrentOption}
    } { }
}
\DeclareOption{twoside} {
    \__UWMad_ThrowWarnings:TF {
        \__UWMad_FrontMatter_StyleWarning:n {\CurrentOption}
    } { }
}
%    \end{macrocode}
%
%   These options change the default report class to the
%   ones indicated.
%    \begin{macrocode}
\DeclareOption{article} {
    \tl_gset:Nn \g_UWMad_ParentClass_tl {article}
}
%    \end{macrocode}
%
%   This is a special class option for generating the documentation.
%   Users should not use this unless they know what they're doing.
%   The line below the |ParentClass| class prevents the \pkg{thumbpdf}
%   package from being loaded.
%    \begin{macrocode}
\DeclareOption{l3doc} {
    \tl_gset:Nn \g_UWMad_ParentClass_tl {l3doc}
    \tl_const:cn {ver@thumbpdf.sty} {}
}
%    \end{macrocode}
%
%   Pass all remaining options to the base class.
%    \begin{macrocode}
\DeclareOption*{
    \PassOptionsToClass
        {\CurrentOption}{\g_UWMad_ParentClass_tl}
}
%    \end{macrocode}
%
%   Process the options with some defaults and load the base class.
%    \begin{macrocode}
\ExecuteOptions{oneside,12pt}
\ProcessOptions\relax
\LoadClass{\g_UWMad_ParentClass_tl}[1995/12/01]
%    \end{macrocode}
%
%
%
%   \UWSubModule{Package Loads}
%   Load some packages that give nice features and are not
%   hyperlink sensitive.
%
%   If links were not negated by the options, \pkg{bookmark} and
%   \pkg{hyperref} are loaded.
%    \begin{macrocode}
\bool_if:NTF \g__UWMad_Hyperlinks_bool {
    \RequirePackage{hyperref}
    \RequirePackage{bookmark}
} {
    \DeclareDocumentCommand \href { o m m } {
        #3
    }
    \cs_gset_eq:NN \phantomsection \relax
}
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{xparse}
\RequirePackage{fixltx2e}
\RequirePackage{array}
\RequirePackage{graphicx}
\RequirePackage{setspace}
\RequirePackage{geometry}
%    \end{macrocode}
%
%   If math was not negated by options, the \AmS{} suite is loaded.
%    \begin{macrocode}
\bool_if:NTF \g__UWMad_MathTweaks_bool {
    \RequirePackage{amsmath}
    \RequirePackage{amsfonts}
    \RequirePackage{amssymb}
    \RequirePackage{mathtools}
} { }
%    \end{macrocode}
%
%   And now we load some packages that give nice features and are
%   hyperlink sensitive.
%    \begin{macrocode}
\RequirePackage[noabbrev]{cleveref}
\RequirePackage[usenames,dvipsnames,svgnames,table,hyperref]{xcolor}
\RequirePackage{subfig}
\RequirePackage{caption}
%    \end{macrocode}
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%^^A
%^^A  Module Name: Programming
%^^A  Author:
%^^A    Name:           Troy C. Haskin
%^^A    E-mail:         UWMadThesis@hask.in
%^^A  Version:
%^^A    Number:         1.0
%^^A    Description:    Initial release
%^^A    Date:           06/01/2013
%^^A  Purpose:
%^^A    Provide a programming layer for the UW-Madison Thesis package
%^^A    Most of the module is designed to overcome the lack of such a
%^^A    layer in LaTeX2e.  Some LaTeX3 is being used for certain advanced
%^^A    features, and this module may become obsolete when/if it is upgraded
%^^A    to a pure LaTeX3 implementation; though a thin abatraction layer may
%^^A    still be desired.
%
%   \UWModule{Programming}
%   This section outlines the Programming module for the \UWMadClassName{}.
%   It encompasses thin abstractions from the standard \LaTeXPL{}'s type
%   and collection systems and provides \LaTeXe{} abstractions for
%   several other features.
%
%
%
%   \UWSubModule{Utility Commands}
%
%   Define some messages for the rest of the module.
%    \begin{macrocode}
\msg_new:nnn {UWMadThesis} {Programming/UnregisteredVariable} {
    `#1'~is~not~a~registered~#2.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_DefineLocal:n~or~
    \string\UWMad_#2_DefineGlobal:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Undefined} {
    The~#2~`#1'~is~undefined.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_Define:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Defined} {
    The~#2~`#1'~is~already~defined~and~will~not~altered.
}
%    \end{macrocode}
%
%
%
%   \begin{macro} {
%       \UWMad_Hook_Prepend:nn,
%       \UWMad_Hook_Append:nn}
%   These commands allow additional code to be prepended or appended to a
%   specified command.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hook_Prepend:nn{
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}         {#2 \cs:w #1-Default:\cs_end:}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Append:nn{
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}        {\cs:w #1-Default:\cs_end: #2}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Prepend:Nn{
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {#2 \cs:w\string#1-Default:\cs_end:}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
\cs_new:Nn \UWMad_Hook_Append:Nn{
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {\cs:w\string#1-Default:\cs_end: #2}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro} {
%       \UWMad_Definition_Swap:nn,
%       \UWMad_Definition_Reset:nn}
%   These commands \enquote{swap} in a new definition of a command and,
%   when called, reset it to it's default definition.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Definition_Swap:Nn {
    \cs_new_eq:cN  {\string#1-Default:}  #1
    \cs_new:cn     {\string#1-Swap:}    {#2}
    \cs_undefine:N  #1
    \cs_gset_eq:Nc  #1          {\string#1-Swap:}
}
\cs_new:Nn \__UWMad_Definition_Swap:cn {
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_new:cn     {#1-Swap:}    {#2}
    \cs_undefine:c {#1}
    \cs_gset_eq:cc {#1}          {#1-Swap:}
}
\cs_new:Nn \UWMad_Definition_Swap:cn {
    \cs_if_exist:cTF {#1} {
        \__UWMad_Definition_Swap:cn{#1}{#2}

        \cs_if_exist:cTF {end#1} {
            \__UWMad_Definition_Swap:cn{end#1}{#2}
        }{}
    } {
        \cs_new:cn {#1} {#2}
    }
}
\cs_new:Nn \UWMad_Definition_Reset:c {
    \cs_if_exist:cTF {#1-Default:} {
        \cs_gset_eq:cc  {#1}          {#1-Default:}
        \cs_undefine:c  {#1-Default:}

        \cs_if_exist:cTF {end#1-Default:} {
            \cs_gset_eq:cc  {#1}          {end#1-Default:}
            \cs_undefine:c  {end#1-Default:}
        }{}
    } {}
}
\cs_new:Nn \UWMad_Definition_Swap:Nn {
    \cs_if_exist:NTF #1 {
        \__UWMad_Definition_Swap:Nn #1 {#2}
    } {
        \cs_new:Nn #1 {#2}
    }
}
\cs_new:Nn \UWMad_Definition_Reset:N {
    \cs_if_exist:cTF {\string#1-Default:} {
        \cs_gset_eq:Nc  #1  {\string#1-Default:}
        \cs_undefine:c      {\string#1-Default:}
    } {}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_IfDefined:nnnnT,
%       \__UWMad_IfUndefined:nnnnT}
%   These commands accept a \marg{Prefix}, an \marg{ID}, a \marg{Suffix},
%   a \marg{Type}, and \marg{Code}.  It determines if a command named by the
%   concatenation of \marg{Prefix}, \marg{ID}, and \marg{Suffix}
%   is defined or not and executes \marg{Code} depending on the existence.
%
%   \begin{Usage}
%       \item |\__UWMad_IfUndefined:nnnnT|
%           \marg{Prefix}\marg{ID}\marg{Suffix}\marg{Type}\marg{Code}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nnnnT{
    \cs_if_exist:cTF {#1#2#3} {
        #5
    }{
            \msg_error:nnnn
                {UWMadThesis}
                {Programming/Undefined}
                {#2}
                {#4}
    }
}
\cs_new:Nn \__UWMad_IfUndefined:nnnnT{
    \cs_if_free:cTF {#1#2#3} {
        #5
    }{
            \msg_warning:nnnn
                {UWMadThesis}
                {Programming/Defined}
                {#2}
                {#4}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_IfDefined:nT,
%       \__UWMad_IfUndefined:nT}
%   These commands are simplifications of the above commands and
%   that only take a \marg{CommandName} and \marg{TrueCode}.
%
%   \begin{Usage}
%       \item |\__UWMad_IfUndefined:nT|
%           \marg{CommandName}\marg{TrueCode}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nT{
    \_UWMad_IfDefined:nnnnT{#1}{}{}{command}{#2}
}
\cs_new:Nn \__UWMad_IfUndefined:nT{
    \_UWMad_IfUndefined:nnnnT{#1}{}{}{command}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%
%
%^^A ==================================================================== %
%^^A                        Core Programming Systems                      %
%^^A ==================================================================== %
%   \UWSubModule{Type System}
%
%   The commands in this section form the core of the programming module.
%   All of the Core systems are written using the \LaTeXPL and have
%   extremely long names.  Most of the commands as thin abstractions from
%   the already-written \LaTeXPL modules and are designed to provide
%   a more stream-lined and robust environment in providing
%   useful warnings and errors where needed.
%
%   One of the main features added by the core programming system is more
%   transparent local-global handling.  The onus of remembering which
%   vairables of local-global is all that's needed with the commands
%   for altering them being all of the same.
%
%
%
%   \begin{macro}{\__UWMad_IfLocal:nnnTF}
%   Certain subsystems of the Programming Module make a distinction
%   between local and global variables where scope is determined by
%   \TeX{} groups.  This command takes five arguments designed to
%   increase maintainability and readability in the subsystems that
%   use it.
%
%   This command accepts a \marg{Prefix}, an \marg{ID}, a \marg{Type},
%   \marg{LocalCode}, and \marg{GlobalCode}.  All subsystems that use
%   this command have (in theory) already defined a command that concatenates
%   the \marg{Prefix}, \marg{ID}, and |_Local| or |_Global|
%   of a specific \marg{Type}.  If either of the commands is defined, the
%   appropriate code is executed (in an fully expandable fashion, which is
%   used to reduce code duplication where possible).  If neither of those
%   commands exist, the variable is not registered with the system and an
%   exception is thrown.
%
%   \begin{Usage}
%       \item |\__UWMad_IfLocal:nnnTF| \marg{Prefix}\marg{ID}\marg{Type}
%                               \marg{LocalCode}, and \marg{GLobalCode}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfLocal:nnnTF {
    \cs_if_exist:cTF     {#1#2_Local}{
        #4
    }{
        \cs_if_exist:cTF {#1#2_Global}{
            #5
        }{
            \msg_error:nnnn
                {UWMadThesis}
                {Programming/UnregisteredVariable}
                {#2}
                {#3}
        }
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%
%
%
%^^A ==================================================================== %
%^^A                            Boolean System                            %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Boolean System}
%   This subsystem was made to give a \LaTeX{}-like branching system that
%   can create both local and global switches.
%
%   The system is a thin abstraction of
%   \LaTeXPL's |bool| module in the |l3prg| package to avoid developing
%   a one-shot system while allowing more endeavouring authors access to
%   to the simple feature without learning \LaTeX3{} programming.
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Boolean_IfLocal:nTF,
%       \__UWMad_Boolean_IfUndefined:nnT}
%   These commands are shortcuts to the more general commands
%   outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Boolean_IfLocal:nTF {
    \__UWMad_IfLocal:nnnTF
        {g__UWMad_Boolean_}{#1}{Boolean}{#2}{#3}
}
\cs_new:Nn \__UWMad_Boolean_IfUndefined:nnT{
    \__UWMad_IfUndefined:nnnnT
        {g__UWMad_Boolean_}{#1}{#2}{Boolean}{#3}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Boolean_DefineLocal:n,
%       \UWMad_Boolean_DefineGlobal:n}
%   Create a new Boolean with local or global scope.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_DefineLocal:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Local} {
        \bool_new:c {g__UWMad_Boolean_#1_Local}
    }
}
\cs_new:Nn \UWMad_Boolean_DefineGlobal:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Global} {
        \bool_new:c {g__UWMad_Boolean_#1_Global}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{
%       \UWMad_Boolean_DefineLocalSetTrue:n,
%       \UWMad_Boolean_DefineLocalSetFalse:n}
%   Define a new  local Boolean with an explicit initial state.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_DefineLocalSetTrue:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Local} {
        \bool_new:c       {g__UWMad_Boolean_#1_Local}
        \bool_gset_true:c {g__UWMad_Boolean_#1_Local}
    }
}
\cs_new:Nn \UWMad_Boolean_DefineLocalSetFalse:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Local} {
        \bool_new:c        {g__UWMad_Boolean_#1_Local}
        \bool_gset_false:c {g__UWMad_Boolean_#1_Local}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{\UWMad_Boolean_Delete:n}
%   Delete a defined boolean.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_Delete:n {
    \__UWMad_Boolean_IfLocal:nTF {#1} {
        \cs_undefine:c {g__UWMad_Boolean_#1_Local}
    } {
        \cs_undefine:c {g__UWMad_Boolean_#1_Global}
    }
}
%    \end{macrocode}
%   \end{macro}
%   \begin{macro}{
%       \UWMad_Boolean_DefineGlobalSetTrue:n,
%       \UWMad_Boolean_DefineGlobalSetFalse:n}
%   Define a new  global Boolean with an explicit initial state.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_DefineGlobalSetTrue:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Global} {
        \bool_new:c       {g__UWMad_Boolean_#1_Global}
        \bool_gset_true:c {g__UWMad_Boolean_#1_Global}
    }
}
\cs_new:Nn \UWMad_Boolean_DefineGlobalSetFalse:n {
    \__UWMad_Boolean_IfUndefined:nnT {#1} {_Global} {
        \bool_new:c        {g__UWMad_Boolean_#1_Global}
        \bool_gset_false:c {g__UWMad_Boolean_#1_Global}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Boolean_SetTrue:n,
%       \UWMad_Boolean_SetFalse:n}
%   Set any defined Boolean to true or false.
%   Local-global assignment is handled by the Boolean's initial
%   definition.  If a local and global Boolean exist with the
%   same name, a local assignment is carried out.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_SetTrue:n {
    \__UWMad_Boolean_IfLocal:nTF {#1} {
        \bool_set_true:c  {g__UWMad_Boolean_#1_Local}
    }{
        \bool_gset_true:c {g__UWMad_Boolean_#1_Global}
    }
}
\cs_new:Nn \UWMad_Boolean_SetFalse:n {
    \__UWMad_Boolean_IfLocal:nTF {#1} {
        \bool_set_false:c  {g__UWMad_Boolean_#1_Local}
    }{
        \bool_gset_false:c {g__UWMad_Boolean_#1_Global}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Boolean_IfTrue:n,
%       \UWMad_Boolean_IfFalse:n}
%   Conditionally execute code depending on the current state
%   of the Boolean.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Boolean_IfTrue:nTF {
    \__UWMad_Boolean_IfLocal:nTF {#1} {
        \bool_if:cTF {g__UWMad_Boolean_#1_Local}
    }{
        \bool_if:cTF {g__UWMad_Boolean_#1_Global}
    }
    {#2}
    {#3}
}
\cs_new:Nn \UWMad_Boolean_IfFalse:nTF {
    \__UWMad_Boolean_IfLocal:nTF {#1} {
        \bool_if:cTF {g__UWMad_Boolean_#1_Local}
    }{
        \bool_if:cTF {g__UWMad_Boolean_#1_Global}
    }
    {#3}
    {#2}
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%
%
%^^A ==================================================================== %
%^^A                            Length System                             %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Length System}
%   This subsystem was made to give a \LaTeX{}-like length system that
%   can create both local and global lengths.
%
%   The system is a thin abstraction of
%   \LaTeXPL's |dim| module in the |l3skip| package to avoid developing
%   a one-shot system while allowing more endeavouring authors access to
%   to the simple feature without learning \LaTeX3{} programming.
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Length_IfLocal:nTF,
%       \__UWMad_Length_IfUndefined:nnT}
%   These commands are shortcuts to the more general
%   commands outlines above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Length_IfLocal:nTF {
    \__UWMad_IfLocal:nnnTF
        {g__UWMad_Length_}{#1}{Length}{#2}{#3}
}
\cs_new:Nn \__UWMad_Length_IfUndefined:nnT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Length_}{#1}{#2}{Length}{#3}
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Length_DefineLocal:nn,
%       \UWMad_Length_DefineGlobal:nn}
%   Define a new Length with an explicit initial value having either
%   local or global scope.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Length_DefineLocal:nn {
    \__UWMad_Length_IfUndefined:nnT {#1} {_Local} {
        \dim_new:c   {g__UWMad_Length_#1_Local}
        \dim_gset:cn {g__UWMad_Length_#1_Local} {#2}
    }
}
\cs_new:Nn \UWMad_Length_DefineGlobal:nn {
    \__UWMad_Length_IfUndefined:nnT {#1} {_Global} {
        \dim_new:c   {g__UWMad_Length_#1_Global}
        \dim_gset:cn {g__UWMad_Length_#1_Global} {#2}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{\UWMad_Length_Add:nn}
%   Add a dimension to a defined Length.
%   Local-global assignment is handled by the Length's initial
%   definition.  If a local and global Length exist with the
%   same name, a local assignment is carried out.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Length_Add:nn {
    \__UWMad_Length_IfLocal:nTF {#1} {
        \dim_add:cn  {g__UWMad_Length_#1_Local}  {#2}
    }{
        \dim_gadd:cn {g__UWMad_Length_#1_Global} {#2}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{\UWMad_Length_Set:nn}
%   Set the dimension of a defined Length.
%   Local-global assignment is handled by the Length's initial
%   definition.  If a local and global Length exist with the
%   same name, a local assignment is carried out.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Length_Set:nn {
    \__UWMad_Length_IfLocal:nTF {#1} {
        \dim_set:cn  {g__UWMad_Length_#1_Local}  {#2}
    }{
        \dim_gset:cn {g__UWMad_Length_#1_Global} {#2}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{\UWMad_Length_Of:n}
%   Retreive the value of a defined Length.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Length_Of:n {
    \__UWMad_Length_IfLocal:nTF {#1} {
        \dim_use:c {g__UWMad_Length_#1_Local}
    }{
        \dim_use:c {g__UWMad_Length_#1_Global}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%   \begin{macro}{\UWMad_Length_If:nnnTF}
%   Conditionally execute true/false code based  on the
%   value of a defined Length given an operator and second
%   operand.
%
%   \begin{Usage}
%       \item |\UWMad_Length_If:nnnTF|
%               \marg{LengthID}\marg{Operator}\marg{Operand}
%                   \marg{True}\marg{False}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Length_If:nnnTF {
    \dim_compare:nTF{ \UWMad_Length_Of:n{#1} #2 #3 }{
        #4
    }{
        #5
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%
%
%^^A ==================================================================== %
%^^A                            Counter System                            %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Counter System}
%   This subsystem was made to give a \LaTeX{}-like counter system that
%   can create both local and global counters.
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Counter_IfLocal:nTF,
%       \__UWMad_Counter_IfUndefined:nTF}
%   These commands are shortcuts to the more general
%   commands outlines above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Counter_IfLocal:nTF {
    \__UWMad_IfLocal:nnnTF
        {g__UWMad_Counter_}{#1}{Counter}{#2}{#3}
}
\cs_new:Nn \__UWMad_Counter_IfUndefined:nnT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Counter_}{#1}{#2}{Counter}{#3}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_Counter_DefineLocal:nn,
%       \UWMad_Counter_DefineGlobal:nn}
%   This pair creates either a local or global counter named
%   \marg{Counter Name} with \marg{Initial Value}. The counters
%   are registered, defined to be local or global, initialized
%   by |\newcount|, and set to \marg{Initial Value}.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_DefineLocal:nn|\marg{Counter Name}{Initial Value}
%       \item |\UWMad_Counter_DefineGlobal:nn|\marg{Counter Name}{Initial Value}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_DefineLocal:nn {
    \__UWMad_Counter_IfUndefined:nnT {#1} {_Local} {
        \int_new:c   {g__UWMad_Counter_#1_Local}
        \int_gset:cn {g__UWMad_Counter_#1_Local} {#2}
    }
}
\cs_new:Nn \UWMad_Counter_DefineGlobal:nn {
    \__UWMad_Counter_IfUndefined:nnT {#1} {Global} {
        \int_new:c   {g__UWMad_Counter_#1_Global}
        \int_gset:cn {g__UWMad_Counter_#1_Global} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_Counter_Add:nn}
%   This command adds \marg{Increment} to the current value of counter
%   \marg{CounterName}. Local vs. global advancement is set at definition
%   and is handled transparently.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_Add:nn|\marg{CounterName}\marg{Increment}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_Add:nn {
    \__UWMad_Counter_IfLocal:nTF {#1} {
        \int_add:cn  {g__UWMad_Counter_#1_Local}  {#2}
    }{
        \int_gadd:cn {g__UWMad_Counter_#1_Global} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_Counter_Step:n}
%   Adds $1$ to the counter \marg{Counter Name}.
%   |\UWMad_IsLocal:nnn| handles the local vs. global advancement.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_Step:n|\marg{Counter Name}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_Step:n {
    \UWMad_Counter_Add:nn{#1}{1}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_Counter_Set:nn}
%   This command sets the value of counter \marg{Counter Name} to
%   \marg{Value}.
%   |\UWMad_IsLocal:nnn| handles the local vs. global assignment.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_Set:nn|\marg{Counter Name}\marg{Value}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_Set:nn {
    \__UWMad_Counter_IfLocal:nTF {#1} {
        \int_set:cn  {g__UWMad_Counter_#1_Local}  {#2}
    }{
        \int_gset:cn {g__UWMad_Counter_#1_Global} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_Counter_SetAndAdd:nnn,
%       \UWMad_Counter_SetAndStep:nn}
%   Combinations of |\SetCounter|, |AddToCounter|, and |\StepCounter|.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_SetAndAdd:nnn|\marg{Counter Name}
%                   \marg{Initial Value}\marg{Value}
%       \item |\UWMad_Counter_SetAndStep:nn|\marg{Counter Name}
%                   \marg{Initial Value}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_SetAndAdd:nnn {
    \UWMad_Counter_Set:nn{#1}{#2}
    \UWMad_Counter_Add:nn{#1}{#3}
}
\cs_new:Nn \UWMad_Counter_SetAndStep:nn {
    \UWMad_Counter_SetAndAdd:nnn {#1}{#2}{1}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_Counter_Value:n}
%   Combinations of |\SetCounter|, |AddToCounter|, and |\StepCounter|.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_Value:n|\marg{Counter Name}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_Value:n {
    \__UWMad_Counter_IfLocal:nTF {#1} {
        \int_use:c {g__UWMad_Counter_#1_Local}
    }{
        \int_use:c {g__UWMad_Counter_#1_Global}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_Counter_Compare:nnnTF}
%
%   \begin{Usage}
%       \item |\UWMad_Counter_Compare:nnnTF| {}{}{}{}{}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_Compare:nnnTF {
    \int_compare:nTF {\UWMad_Counter_Value:n{#1} #2 #3} {
        #4
    }{
        #5
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_Counter_arabic:n,
%       \UWMad_Counter_alpha:n,
%       \UWMad_Counter_Alpha:n,
%       \UWMad_Counter_roman:n,
%       \UWMad_Counter_Roman:n,}
%   This set of functions converts the counter \marg{CounterName}
%   into a formatted number.
%
%   \begin{Usage}
%       \item |\UWMad_Counter_arabic:n| \marg{CounterName}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Counter_arabic:n {
    \int_to_arabic:n {\UWMad_Counter_Value:n{#1}}
}
\cs_new:Nn \UWMad_Counter_alpha:n {
    \int_to_alph:n {\UWMad_Counter_Value:n{#1}}
}
\cs_new:Nn \UWMad_Counter_Alpha:n {
    \int_to_Alph:n {\UWMad_Counter_Value:n{#1}}
}
\cs_new:Nn \UWMad_Counter_roman:n {
    \int_to_roman:n {\UWMad_Counter_Value:n{#1}}
}
\cs_new:Nn \UWMad_Counter_Roman:n {
    \int_to_Roman:n {\UWMad_Counter_Value:n{#1}}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%
%
%
%^^A ======================================================================= %
%^^A                     Collection Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubModule{Collections}
%   In the following subsections, commands that create and manipulate
%   various collection data types will be discussed.  The collections
%   currently implemented are comma-separate values (CSVs), stacks (LIFO),
%   queues (FIFO), deques (LIFO+FIFO), and hashes (key-value pairs).
%
%   All of the collection systems are thin abstractions of \LaTeXPL{}'s
%   |l3clist|, |l3tl|, |l3seq|, and |l3prop| modules to avoid developing
%   one-shot systems while allowing more endeavoring authors access to the
%   features without learning \LaTeX3{} programming if they load the
%   abstractions.
%
%
%
%^^A ======================================================================= %
%^^A                          CSV Creation Commands                          %
%^^A ======================================================================= %
%
%   \UWSubSubModule{CSVs}
%   This set of commands is a simple system for comma-separated value (CSV)
%   list creation.  It consists of only a few functions: initialize list,
%   append value, prepend value, get list, and erase list.
%
%   This feature was created solely to export |hyperref| meta-data to an
%   external file for later reading.  The system is a thin abstraction of
%   \LaTeXPL's |l3clist| package to avoid developing
%   a one-shot system while allowing more endeavouring authors access to
%   to the simple feature without learning \LaTeX3{} programming.
%
%
%   \begin{macro}[internal]{
%       \__UWMad_CSV_IfDefined:nT,
%       \__UWMad_CSV_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_CSV_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_CSV_}{#1}{}{CSV}{#2}
}
\cs_new:Nn \__UWMad_CSV_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_CSV_}{#1}{}{CSV}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Define:n}
%   Define a new CSV.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Define:n {
    \__UWMad_CSV_IfUndefined:nT {#1} {
        \clist_new:c {g__UWMad_CSV_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Clear:n}
%   Define a clear a defined CSV but do not undefine.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Clear:n {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \clist_gclear:c {g__UWMad_CSV_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Delete:n}
%   Define a clear and undefine a defined CSV.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Delete:n {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \clist_gclear:c {g__UWMad_CSV_#1}
        \cs_undefine:c  {g__UWMad_CSV_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Append:nn}
%   Push a value on to the right side of a defined CSV.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Append:nn {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \clist_gput_right:cn {g__UWMad_CSV_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Prepend:nn}
%   Push a value on to the left side of a defined CSV.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Prepend:nn {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \clist_gput_left:cn {g__UWMad_CSV_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_Get:n}
%   Return a defined CSV to the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_Get:n {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \use:c {g__UWMad_CSV_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_CSV_IfNotEmpty:nTF}
%   Execute true/false code depending on if the
%   defined CSV is empty or not.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_CSV_IfNotEmpty:nTF {
    \__UWMad_CSV_IfDefined:nT {#1} {
        \clist_if_empty:cTF {g__UWMad_CSV_#1} {
            #3
        }{
            #2
        }
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%
%
%
%^^A ======================================================================= %
%^^A                          Stack Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Stacks}
%   This set of commands is a simple system for creating and working with
%   stacks.  Stacks are a last-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) last
%   pushed on to the stack is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a LIFO sense.
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Stack_IfDefined:nT,
%       \__UWMad_Stack_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Stack_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
\cs_new:Nn \__UWMad_Stack_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Define:n}
%   Define a new Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Define:n {
    \__UWMad_Stack_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Clear:n}
%   Clear but do not undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Clear:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Delete:n}
%   Clear and undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Delete:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
        \cs_undefine:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Push:nn}
%   Push a value on to a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Push:nn {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Stack_#1} {#2}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Pop:n}
%   Pop a value off a defined Stack and place it in the
%   input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Pop:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_set:Nf \l_tmpa_tl          {\tl_head:c {g__UWMad_Stack_#1}}
        \tl_set:cf {g__UWMad_Stack_#1} {\tl_tail:c {g__UWMad_Stack_#1}}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Stack_Walk:nn}
%   Iterate of the elements of a defined Stack in a FILO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Walk:nn {
    \tl_map_inline:cn {g__UWMad_Stack_#1} {#2}
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%^^A ======================================================================= %
%^^A                          Queue Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Queues}
%   This set of commands is a simple system for creating and working with
%   queue.  Queues are a first-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) first
%   pushed on to the queue is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a FIFO sense.
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Queue_IfDefined:nT,
%       \__UWMad_Queue_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Queue_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
\cs_new:Nn \__UWMad_Queue_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Define:n}
%   Define a new Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Define:n {
    \__UWMad_Queue_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Clear:n}
%   Clear but do not undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Clear:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Delete:n}
%   Clear and undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Delete:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c    {g__UWMad_Queue_#1}
         \cs_undefine:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Pop:nn}
%   Push an item on to the start of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Push:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Queue_#1} {{#2}}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Pop:n}
%   Pop an item from the end of a defined Queue
%   and place it in the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Pop:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_set:Nf \l_tmpa_tl
            {\tl_head:c {g__UWMad_Queue_#1}}
        \tl_set:cf      {g__UWMad_Queue_#1}
            {\tl_tail:c {g__UWMad_Queue_#1}}
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_Walk:nn}
%   Iterate of the elements of a defined Queue in a FIFO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Walk:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \group_begin:
            \tl_reverse:c     {g__UWMad_Queue_#1}
            \tl_map_inline:cn {g__UWMad_Queue_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Queue_IfEmpty:nTF}
%   Execute true/false code depending on the emptiness
%   of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_IfEmpty:nTF {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_if_empty:cTF {g__UWMad_Queue_#1}{
            #2
        }{
            #3
        }
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%^^A ======================================================================= %
%^^A                          Deque Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Deques}
%   This set of commands is a simple system for creating and working with
%   double-ended queues (deques, pronounced \textit{deck}).  Deques are a
%   generalization of stacks and queues in that data can be pushed, popped,
%   and walked from either end of the list (i.e., LIFO+FIFO).
%
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Deque_IfDefined:nT,
%       \__UWMad_Deque_IfUndefined:nT}
%   Shortcuts for the more general  commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Deque_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
\cs_new:Nn \__UWMad_Deque_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Deque_Define:n}
%   Define a new Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Define:n {
    \__UWMad_Deque_IfUndefined:nT {#1} {
        \seq_new:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Deque_Clear:n}
%   Clear but do not undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Clear:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Deque_Clear:n}
%   Clear and undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Delete:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
        \cs_undefine:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Deque_PushLeft:nn,
%       \UWMad_Deque_PushRight:nn}
%   Push an element on to the left or right of a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PushLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_left:cn  {g__UWMad_Deque_#1} {#2}
    }
}
\cs_new:Nn \UWMad_Deque_PushRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_right:cn {g__UWMad_Deque_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Deque_PushLeft:nn,
%       \UWMad_Deque_PushRight:nn}
%   Pop an element from the left or right of a defined Deque
%   and place it into the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PopLeft:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_left:cN  {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
\cs_new:Nn \UWMad_Deque_PopRight:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_right:cN {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{
%       \UWMad_Deque_WalkLeftToRight:nn,
%       \UWMad_Deque_WalkRightToLeft:nn}
%   Iterate over the elements left-to-right or right-to-left
%   of a defined Deque with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_WalkLeftToRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
    }
}
\cs_generate_variant:Nn \seq_reverse:N {c}
\cs_new:Nn \UWMad_Deque_WalkRightToLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \group_begin:
            \seq_reverse:c     {g__UWMad_Deque_#1}
            \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%
%
%^^A =========================================================================== %
%^^A                 Hashes (Associative Arrays) with LaTeX3                     %
%^^A =========================================================================== %
%
%   \UWSubSubModule{Hashes}
%   This set of commands is a simple system for creating and working with
%   hashes (more often called associative arrays or dictionaries, but erring
%   on the side of usablility, Ruby's jargon will be used). Hashes are a
%   type of array that indexes values by (at least in \LaTeX{}) alphanumeric
%   keys instead of just integers.
%   Data can be set by key, retrieved by key, unset by key, deleted, and walked.
%
%   A hash walk, like the collection walks above, iterates through all of the
%   keys and values in the hash while applying a user supplied function.
%   However, unlike the collection walks, \textbf{a hash's walk order is not
%   gauranteed to be the set order}.  If walk order is needed to be
%   gauranteed, see the previous collection data types.
%
%   The system is a thin abstraction of \LaTeXPL's
%   |l3prop| module to avoid developing a one-shot system while allowing more
%   endeavoring authors access to the feature without learning \LaTeX3{}
%   programming.
%
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_gput:Nnn   { c x n   }
\cs_generate_variant:Nn \prop_if_in:NnTF { c x TF  }
\cs_generate_variant:Nn \prop_if_in:NnTF { c f TF  }
\cs_generate_variant:Nn \prop_get:Nn     { c x     }
\cs_generate_variant:Nn \prop_get:Nn     { c f     }
\cs_generate_variant:Nn \prop_get:NnNTF  { c x N TF}
\cs_generate_variant:Nn \prop_gremove:Nn { c x     }
%    \end{macrocode}
%
%
%   \begin{macro}[internal]{
%       \__UWMad_Hash_IfDefined:nT,
%       \__UWMad_Hash_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Hash_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
\cs_new:Nn \__UWMad_Hash_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Define:n}
%   Define a new Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Define:n {
    \__UWMad_Hash_IfUndefined:nT {#1} {
        \prop_new:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Set:nnn}
%   Set the value of a key of a defined Hash.
%
%   \begin{Usage}
%       \item|\UWMad_Hash_Set:nnn|\marg{HashID}\marg{Key}\marg{Value}
%   \end{Usage}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Set:nnn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gput:cxn {g__UWMad_Hash_#1}{#2}{#3}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Get:nn}
%   Get the value of a key of a defined Hash and place
%   it into the input stream.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_get:cn {cf}
\cs_new:Nn \UWMad_Hash_Get:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_get:cf {g__UWMad_Hash_#1}{#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Unset:nn}
%   Undefine a key-value pair in a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Unset:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gremove:cx {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_IfKeySet:nnTF}
%   Execute true/false code depending on if a key is set in
%   a defined Hash.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_to_lowercase:n {f}
\cs_new:Nn \UWMad_Hash_IfKeySet:nnTF {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_if_in:cfTF {g__UWMad_Hash_#1} {\tl_trim_spaces:n{#2}} {
            #3
        }{
            #4
        }
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Walk:nn}
%   Iterate over the key-value pairs of a defined Hash with
%   supplied code. \textbf{No order is gauranteed.}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Walk:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_map_inline:cn {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\UWMad_Hash_Delete:n}
%   Clear and undefine a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Delete:n {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gclear:c {g__UWMad_Hash_#1}
        \cs_undefine:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%    \end{macro}
%
%
%
%
%^^A ==================================================================== %
%^^A                         LaTeX2e Abstractions                         %
%^^A ==================================================================== %
%
%   \UWSubModule{User-Level Abstractions}
%
%   The commands that follow are \LaTeXe{}-like commands that use the
%   \LaTeXPL{} as the underlying system.  \textbf{The commands are not loaded
%   by default; they must be invoked by calling the following command.}
%
%
%   \UWSubSubModule{Utility Commands}
%
%   \begin{macro}{\LoadUtilityAPI}
%   \textbf{This command needs to be invoked to load these Utilities
%   for usage.}
%
%    \begin{macrocode}
\DeclareDocumentCommand \LoadUtilityAPI { } {
%    \end{macrocode}
%   \end{macro}
%
%
%   \begin{macro}{\IfCommandExists,\IfCommandDoesNotExist}
%   This command pair is used instead of \LaTeX{}'s |\@ifundefined|.
%   Since it is \eTeX{}, this command will allow for a switch to
%   |\@ifundefined| if problems arise from non-\eTeX{} users in the
%   future.
%
%   \begin{Usage}
%       \item |\IfCommandExists|\marg{Command Name}\marg{True}\marg{False}
%       \item |\IfCommandDoesNotExist|\marg{Command Name}\marg{True}\marg{False}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandExists { m +m +m }{
    \cs_if_exist:cTF {##1}{
        ##2
    }{
        ##3
    }
}
\DeclareDocumentCommand \IfCommandDoesNotExist { m +m +m }{
    \cs_if_free:cTF {##1}{
        ##2
    }{
        ##3
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\IfStringEmpty}
%   Checks if a given string is empty.
%   It uses the |etoolbox|'s |\ifblank|.
%   This command will not expand input.
%
%   \begin{Usage}
%       \item |\IfStringEmpty|\marg{String}\marg{True}\marg{False}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfStringEmpty { m +m +m }{
    \tl_if_blank:nTF {##1}{
        ##2
    }{
        ##3
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\IfCommandEmpty}
%   Uses the |etoolbox|'s |\ifdefempty| command to test if a command expands
%   to an empty string and is followed by the given conditional code.
%
%   \begin{Usage}
%       \item |IfCommandEmpty|\marg{Command}\marg{True}\marg{False}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandEmpty { m +m +m }{
    \tl_if_blank:oTF{##1}{
        ##2
    }{
        ##3
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   Close |\LoadUtilityAPI|.
%    \begin{macrocode}
}
%    \end{macrocode}
%
%
%
%
%
%
%^^A ==================================================================== %
%^^A                      Command Creator System                          %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Command Creators}
%
%
%   \begin{macro}{\LoadCommandAPI}
%   \textbf{This command needs to be invoked to load these Command Creators
%   for usage.}
%
%    \begin{macrocode}
\DeclareDocumentCommand \LoadCommandAPI { } {
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{\MakeCommand,\ReMakeCommand}
%   This command pair uses the |etoolbox|'s |\csdef| to define a commands
%   via a supplied string \marg{Command Name} and a set of \marg{Code}.
%   If the requested command is not defined, |\MakeCommand| will create it;
%   however, if the requested command is already defined, |\MakeCommand| will
%   throw a warning and not make the command.
%   If the requested command is defined, |\ReMakeCommand| will redefine it;
%   however, if the requested command is not defined, |\ReMakeCommand| will
%   throw a warning and not make the command.
%
%   \begin{Usage}
%       \item |\MakeCommand|\marg{Command Name}\marg{Code}
%       \item |\ReMakeCommand|\marg{Command Name}\marg{Code}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommand { O{} m +m } {
    \cs_if_free:cTF {##2} {
        \cs_set:cpn {##2} ##1 {##3}
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{##2}{command}
    }
}
\DeclareDocumentCommand \ReMakeCommand { O{} m +m }{
    \cs_if_exist:cTF {##2} {
        \cs_set:cpn {##2} ##1 {##3}
    }{
        \msg_error:nnnn
            {UWMadThesis}{Programming/Undefined}{##2}{command}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\MakeGlobalCommand}
%   Similar to |\MakeCommand| except the creation is made regardless of the
%   requested command's definition and the creation is global.
%
%   \begin{Usage}
%       \item |\MakeGlobalCommand|\marg{Command Name}\marg{Code}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeGlobalCommand { O{} +m m } {
    \cs_gset:cpn {##2} ##1 {##3}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\MakeExpandedCommand}
%   This command creates a command in the spirit of |\MakeCommand|
%   but with several differences.  First, the command simply creates
%   the requested command without regard to its existence.  Secondly,
%   the \marg{Code} supplied is fully expanded without protection.
%   Lastly, the definitions are global.
%
%   \begin{Usage}
%       \item |\MakeExpandedCommand|\marg{Command Name}\marg{Code}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeExpandedCommand { O{} m +m } {
    \cs_get:cpx {##2} ##1 {##3}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\MakeCommandUndefined}
%   Globally undefines the command specified by \marg{Command Name}.
%
%   \begin{Usage}
%       \item |\MakeCommandUndefined|\marg{Command Name}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommandUndefined { m } {
    \cs_undefine:c {##1}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\CopyCommand}
%   Copies the defintion of the command named \marg{Command Name 1} to
%   a new command named \marg{Command Name 2}.  If \marg{Command Name 2}
%   already has a definition, |\CopyCommand| will throw a warning
%   \emph{but} still make the copy.
%
%   \begin{Usage}
%       \item |\CopyCommand|\marg{Command Name 1}\marg{Command Name 2}
%   \end{Usage}
%
%    \begin{macrocode}
\DeclareDocumentCommand \CopyCommand { m m } {
    \cs_if_free:cTF {##1} {
        \cs_if_free:cTF {##2} {
            \cs_gset_eq:cc {##2}{##1}
        }{
            \msg_warning:nnnn
                {UWMadThesis}{Programming/Defined}{##2}{command}
        }
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{##1}{command}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%   Close |\LoadCommandAPI|.
%    \begin{macrocode}
}
%    \end{macrocode}
%
%
%
%
%   \UWSubSubModule{Types}
%
%   \begin{macro}{\LoadTypesAPI}
%   \textbf{This command needs to be invoked to load these Type Commands
%   for usage.}
%
%    \begin{macrocode}
\DeclareDocumentCommand \LoadTypesAPI { } {
%    \end{macrocode}
%   \end{macro}
%
%   \begin{macro}{
%       \BooleanDefineLocal,
%       \BooleanDefineGlobal,
%       \BooleanDefineLocalAndSetTrue,
%       \BooleanDefineLocalAndSetFalse,
%       \BooleanDefineGlobalAndSetTrue,
%       \BooleanDefineGlobalAndSetFalse,
%       \BooleanSetTrue,
%       \BooleanSetFalse,
%       \BooleanSetIfTrue,
%       \BooleanSetIfFalse}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\cs_gset_eq:NN
    \BooleanDefineLocal             \UWMad_Boolean_DefineLocal:n
\cs_gset_eq:NN
    \BooleanDefineGlobal            \UWMad_Boolean_DefineGlobal:n
\cs_gset_eq:NN
    \BooleanDefineLocalAndSetTrue   \UWMad_Boolean_DefineLocalAndSetTrue:n
\cs_gset_eq:NN
    \BooleanDefineLocalAndSetFalse  \UWMad_Boolean_DefineLocalAndSetFalse:n
\cs_gset_eq:NN
    \BooleanDefineGlobalAndSetTrue  \UWMad_Boolean_DefineGlobalAndSetTrue:n
\cs_gset_eq:NN
    \BooleanDefineGlobalAndSetFalse \UWMad_Boolean_DefineGlobalAndSetFalse:n
\cs_gset_eq:NN
    \BooleanSetTrue                 \UWMad_Boolean_SetTrue:n
\cs_gset_eq:NN
    \BooleanSetFalse                \UWMad_Boolean_SetFalse:n
\cs_gset_eq:NN
    \BooleanSetIfTrue               \UWMad_Boolean_SetIfTrue:nTF
\cs_gset_eq:NN
    \BooleanSetIfFalse              \UWMad_Boolean_SetIfFalse:nTF
%    \end{macrocode}
%    \end{macro}
%
%
%
%   \begin{macro}{
%       \LengthDefineLocal,
%       \LengthDefineGlobal,
%       \LengthAdd,
%       \LengthSet,
%       \LengthOf,
%       \LengthIf}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\cs_gset_eq:NN \LengthDefineLocal   \UWMad_Length_DefineLocal:nn
\cs_gset_eq:NN \LengthDefineGlobal  \UWMad_Length_DefineGlobal:nn
\cs_gset_eq:NN \LengthAdd           \UWMad_Length_Add:nn
\cs_gset_eq:NN \LengthSet           \UWMad_Length_Set:nn
\cs_gset_eq:NN \LengthOf            \UWMad_Length_Of:n
\cs_gset_eq:NN \LengthIf            \UWMad_Length_If:nTF
%    \end{macrocode}
%    \end{macro}
%
%
%
%   \begin{macro}{
%        \CounterDefineLocal,
%        \CounterDefineGlobal,
%        \CounterAdd,
%        \CounterStep,
%        \CounterSet,
%        \CounterSetAndAdd,
%        \CounterSetAndStep,
%        \CounterValue,
%        \CounterIf,
%        \CounterCompare,
%        \CounterArabic,
%        \CounterAlpha,
%        \CounterALPHA,
%        \CounterRoman,
%        \CounterROMAN}
%   \LaTeXe{} version of the Counter Type system above.
%    \begin{macrocode}
\cs_gset_eq:NN \CounterDefineLocal  \UWMad_Counter_DefineLocal:nn
\cs_gset_eq:NN \CounterDefineGlobal \UWMad_Counter_DefineGlobal:nn
\cs_gset_eq:NN \CounterAdd          \UWMad_Counter_Add:nn
\cs_gset_eq:NN \CounterStep         \UWMad_Counter_Step:n
\cs_gset_eq:NN \CounterSet          \UWMad_Counter_Set:nn
\cs_gset_eq:NN \CounterSetAndAdd    \UWMad_Counter_SetAndAdd:nn
\cs_gset_eq:NN \CounterSetAndStep   \UWMad_Counter_SetAndStep:nn
\cs_gset_eq:NN \CounterValue        \UWMad_Counter_Value:n
\cs_gset_eq:NN \CounterIf           \UWMad_Counter_If:nTF
\cs_gset_eq:NN \CounterCompare      \UWMad_Counter_Compare:nnnTF
\cs_gset_eq:NN \CounterArabic       \UWMad_Counter_arabic:n
\cs_gset_eq:NN \CounterAlpha        \UWMad_Counter_alpha:n
\cs_gset_eq:NN \CounterALPHA        \UWMad_Counter_Alpha:n
\cs_gset_eq:NN \CounterRoman        \UWMad_Counter_roman:n
\cs_gset_eq:NN \CounterROMAN        \UWMad_Counter_Roman:n
%    \end{macrocode}
%    \end{macro}
%
%
%
%   Close |\LoadTypesAPI|.
%    \begin{macrocode}
}
%    \end{macrocode}
%
%
%
%   \UWSubSubModule{Collections}
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWModule{Layout And Styles}
%
%
%
%
%    \begin{macrocode}
    \geometry{
        margin      = 1.0in,
        includehead = true,
        paper       = letterpaper
    }
%
    \creflabelformat{equation}{#2#1#3}
%
    \captionsetup[table]{
        format=hang,
        labelsep=colon,
        justification=justified,
        labelfont={sl},
        textfont=sl,
        font={sc,small,stretch=1.1},
        width=0.9\textwidth,
        position=above,
        skip=0.25em
    }
%
    \captionsetup[figure]{
        format=hang,
        labelsep=colon,
        justification=justified,
        labelfont={sl},
        textfont=sl,
        font={small,stretch=1.1},
        width=0.9\textwidth,
        position=above,
        skip=0.5em
    }
%
\definecolor{UWMadGreen}{rgb}{0,0.7,0}
%
% Default hyperref behavior that is *not* PDF Metadata
\bool_if:NTF \g__UWMad_Hyperlinks_bool {
    \hypersetup {
        colorlinks         = true       ,
        linkcolor          = blue       ,
        citecolor          = UWMadGreen ,
        urlcolor           = violet     ,
        pdfdisplaydoctitle = true       ,
        pdfview            = {FitH}     ,
        pdfstartview       = {FitH}     ,
        pdfpagelayout      = OneColumn  ,
        plainpages         = false      ,
        hypertexnames      = true       ,
        bookmarksopenlevel = 3          ,
        bookmarksopen      = true       ,
        unicode            = true
    }
} {}
%
%
\pagestyle{myheadings}
\pagenumbering{roman}
\doublespacing
\setlength{\parindent}{ 0pt}
\setlength{\parskip}  {10pt}
\setlength{\headsep}  {15pt}
%    \end{macrocode}
%
%
%
%   \iffalse
%</Code>
%   \fi
%\iffalse
%<*Code>
%\fi
%
%
%   \UWModule{Sectioning}
%
%
%    \begin{macrocode}
%
%^^A  =========================================================================== %
%^^A                     Redefinition of Chapter Commands                         %
%^^A  =========================================================================== %

\let\DefaultChapter\@chapter

\tl_new:N  \g_UWMad_Sectioning_ChapterPageStyle_tl
\tl_set:Nn \g_UWMad_Sectioning_ChapterPageStyle_tl
    {\thispagestyle{myheadings}}

\def\@chapter{
    \tl_use:N \g_UWMad_Sectioning_ChapterPageStyle_tl
    \ifnum \value{chapter}=0
        \pagenumbering{arabic}
    \fi
    \DefaultChapter
}



%^^A  =========================================================================== %
%^^A                           New Appendix Command                               %
%^^A  =========================================================================== %

% Appendix counter
\UWMad_Counter_DefineGlobal:nn{Appendix}{0}

\newcommand{\AppendixInitializer}{
    \par
    \setcounter{section}{0}
    \def\@chapapp{\appendixname}
    \def\thechapter{
        \@Alph{
            \UWMad_Counter_Value:n{Appendix}
        }
    }
}

\renewcommand{\appendix}{
    \UWMad_Counter_Compare:nnnTF{Appendix}{=}{0} {
        \AppendixInitializer
    }{}
    \UWMad_Counter_Step:n{Appendix}
    \chapter
}





%^^A =========================================================================== %
%^^A               Front Matter Environment/Command Definitions                   %
%^^A  =========================================================================== %
\UWMad_Counter_DefineGlobal:nn{FrontMatter}{0}


\cs_new:Nn \__UWMad_Sectioning_FrontMatterRegister:nn {
    \addcontentsline{toc}{#1}{#2}
    \UWMad_Counter_Step:n{FrontMatter}
}

\cs_undefine:N \abstract
\cs_undefine:N \endabstract

\DeclareDocumentCommand \dedications     { O{Dedications}    } {
    \chapter*{#1}
    \__UWMad_Sectioning_FrontMatterRegister:nn{chapter}{#1}
}
\DeclareDocumentCommand \acknowledgments { O{acknowledgments}} {
    \chapter*{#1}
    \__UWMad_Sectioning_FrontMatterRegister:nn{chapter}{#1}
}
\DeclareDocumentCommand \abstract        { O{Abstract}       } {
    \chapter*{#1}
    \__UWMad_Sectioning_FrontMatterRegister:nn{chapter}{#1}
}
\DeclareDocumentCommand \umiabstract     { O{Abstract}       } {
    \chapter*{#1}
    \__UWMad_Sectioning_FrontMatterRegister:nn{chapter}{#1}
}
\DeclareDocumentCommand \preface         { O{Preface}        } {
    \chapter*{#1}
    \__UWMad_Sectioning_FrontMatterRegister:nn{chapter}{#1}
}





%^^A  =========================================================================== %
%^^A                  List of Contents, Tables, and Figures                       %
%^^A  =========================================================================== %

\cs_gset_eq:NN \TableOfContentsDefault \tableofcontents
\cs_gset_eq:NN \ListOfTablesDefault    \listoftables
\cs_gset_eq:NN \ListOfFiguresDefault   \listoffigures

\cs_undefine:N \tableofcontents
\cs_undefine:N \listoftables
\cs_undefine:N \listoffigures
\cs_undefine:N \contentsname

% Register the Table of Contents to the Table of Contents
\tl_new:N   \g__UWMad_Sectioning_TOCName_tl
\tl_gset:Nn \g__UWMad_Sectioning_TOCName_tl {Table~of~Contents}

\tl_new:N   \g__UWMad_Sectioning_LOTName_tl
\tl_gset:Nn \g__UWMad_Sectioning_LOTName_tl {List~of~Tables}

\tl_new:N   \g__UWMad_Sectioning_LOFName_tl
\tl_gset:Nn \g__UWMad_Sectioning_LOFName_tl {List~of~Figures}

\DeclareDocumentCommand \tableofcontents { } {
    \group_begin:
        \tl_if_empty:nTF {\contentsname}{
            \cs_set_eq:NN \contentsname \g__UWMad_Sectioning_TOCName_tl
        }{}
        \setstretch{1.05}
        \phantomsection
        \__UWMad_Sectioning_FrontMatterRegister:nn
            {chapter}
            {\contentsname}
        \TableOfContentsDefault
        \clearpage
    \group_end:
}
%
%
% Register the List of Tables to the Table of Contents
\DeclareDocumentCommand \listoftables { } {
    \group_begin:
        \cs_set_eq:NN \listtablename \g__UWMad_Sectioning_LOTName_tl
        \setstretch{1.05}
        \__UWMad_Sectioning_FrontMatterRegister:nn
            {chapter}
            {\listtablename}
        \ListOfTablesDefault
        \clearpage
    \group_end:
}
%
%
% Register the List of Figures to the Table of Contents
\DeclareDocumentCommand \listoffigures { } {
    \group_begin:
        \cs_set_eq:NN \listfigurename \g__UWMad_Sectioning_LOFName_tl
        \setstretch{1.05}
        \__UWMad_Sectioning_FrontMatterRegister:nn
            {chapter}
            {\listfigurename}
        \ListOfFiguresDefault
        \clearpage
    \group_end:
}

\cs_set_eq:NN \TableOfContents \tableofcontents
\cs_set_eq:NN \ListOfTables    \listoftables
\cs_set_eq:NN \ListOfFigures   \listoffigures
%
%
%
%
%
%
%^^A  =========================================================================== %
%^^A                  Table of Contents 'Headers' (i.e., Parts)                   %
%^^A  =========================================================================== %
%
\UWMad_Hash_Define:n {SectionToLevel}
\UWMad_Hash_Set:nnn  {SectionToLevel}{part}          {-1}
\UWMad_Hash_Set:nnn  {SectionToLevel}{chapter}       {0}
\UWMad_Hash_Set:nnn  {SectionToLevel}{section}       {1}
\UWMad_Hash_Set:nnn  {SectionToLevel}{subsection}    {2}
\UWMad_Hash_Set:nnn  {SectionToLevel}{subsubsection} {3}
\UWMad_Hash_Set:nnn  {SectionToLevel}{paragraph}     {4}
\UWMad_Hash_Set:nnn  {SectionToLevel}{subparagraph}  {5}
%
\UWMad_Hash_Define:n {LevelToSection}
\UWMad_Hash_Set:nnn  {LevelToSection}{-1}{part}
\UWMad_Hash_Set:nnn  {LevelToSection}{0} {chapter}
\UWMad_Hash_Set:nnn  {LevelToSection}{1} {section}
\UWMad_Hash_Set:nnn  {LevelToSection}{2} {subsection}
\UWMad_Hash_Set:nnn  {LevelToSection}{3} {subsubsection}
\UWMad_Hash_Set:nnn  {LevelToSection}{4} {paragraph}
\UWMad_Hash_Set:nnn  {LevelToSection}{5} {subparagraph}
%
\UWMad_Hash_Define:n {NextSectioningCommand}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{part}          {chapter}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{chapter}       {section}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{section}       {subsection}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{subsection}    {subsubsection}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{subsubsection} {paragraph}
\UWMad_Hash_Set:nnn
    {NextSectioningCommand}{paragraph}     {subparagraph}
%
\UWMad_Hash_Define:n {PreviousSectioningCommand}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{part}          {chapter}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{chapter}       {section}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{section}       {subsection}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{subsection}    {subsubsection}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{subsubsection} {paragraph}
\UWMad_Hash_Set:nnn
    {PreviousSectioningCommand}{paragraph}     {subparagraph}

\newcommand{\LevelToSection}[1]{% #1 = Counter for desired level
    \HashExpandableGet{LevelToSection}{#1}}

\newcommand{\SectionToLevel}[1]{% #1 = section
    \HashExpandableGet{SectionToLevel}{#1}}



%^^A  =========================================================================== %
%^^A       Paragraphs and Subparagraphs are Layed out like subsubsections         %
%^^A  =========================================================================== %
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
                                    {-3.25ex\@plus -1ex \@minus -.2ex}%
                                    {1.5ex \@plus .2ex}%
                                    {\normalfont\normalsize\bfseries}}
\renewcommand\subparagraph{\@startsection{subparagraph}{5}{\parindent}%
                                    {-3.25ex\@plus -1ex \@minus -.2ex}%
                                    {1.5ex \@plus .2ex}%
                                    {\normalfont\normalsize\bfseries}}
%    \end{macrocode}
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWModule{Math}
%
%
%
%
%    \begin{macrocode}
%
%
%
\tex_everydisplay:D \exp_after:wN {
    \tex_the:D \tex_everydisplay:D
    \cs_set_eq:NN \frac \dfrac
}
%
%
%
%
%
% =========================================================================== %
%                             Derivative Commands                             %
% =========================================================================== %
%
\tl_new:N   \g_UWMad_Math_derivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_derivSymbol_tl   {\mathrm{d}}
\tl_new:N   \g_UWMad_Math_pderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl  {\partial}
\tl_new:N   \g_UWMad_Math_tderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl  {\mathrm{D}}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultLeft_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultLeft_tl  {[}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultRight_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultRight_tl {]}
\tl_new:N   \l_UWMad_Math_DelimiterLeft_tl
\tl_new:N   \l_UWMad_Math_DelimiterRight_tl
%
%
\DeclareDocumentCommand \derivSymbol { } {
    \g_UWMad_Math_derivSymbol_tl
}
\DeclareDocumentCommand \pderivSymbol { } {
    \g_UWMad_Math_pderivSymbol_tl
}
\DeclareDocumentCommand \tderivSymbol { } {
    \g_UWMad_Math_tderivSymbol_tl
}
%
%
\DeclareDocumentCommand \derivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%
%
\DeclareDocumentCommand \derivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%
%
\DeclareDocumentCommand \DelimiterChangeDefault { m m } {
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultLeft_tl  {#1}
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultRight_tl {#2}
}
%
%
\DeclareDocumentCommand \DerivativeGeneral { +m +m m m } {
    \frac{ #4^{#3} #1      }
         { #4      #2^{#3} }
}
\DeclareDocumentCommand \DerivativeGeneralBig { +m +m m m m m} {

    \IfNoValueTF {#5} {
        \tl_set_eq:NN
            \l_UWMad_Math_DelimiterLeft_tl
            \g_UWMad_Math_DelimiterDefaultLeft_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterLeft_tl {#5}
    }

    \IfNoValueTF {#6} {
        \tl_set_eq:NN
            \l_UWMad_Math_DelimiterRight_tl
            \g_UWMad_Math_DelimiterDefaultRight_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterRight_tl {#6}
    }

    \frac{ #4^{#3}    }
         { #4 #2^{#3} }
    \!\!
    \left\l_UWMad_Math_DelimiterLeft_tl
        #1
    \right\l_UWMad_Math_DelimiterRight_tl
}
%
%
\DeclareDocumentCommand \deriv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\derivSymbol}
}
\DeclareDocumentCommand \pderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\pderivSymbol}
}
\DeclareDocumentCommand \tderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\tderivSymbol}
}
%
%
\DeclareDocumentCommand \derivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\derivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \pderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\pderivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \tderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\tderivSymbol}{#1}{#3}
}
%
%
%
%
\DeclareMathOperator*{\Sup}    {Sup}
\DeclareMathOperator*{\Inf}    {Inf}
\DeclareMathOperator*{\Lim}    {Lim}
\DeclareMathOperator*{\Min}    {Min}
\DeclareMathOperator*{\Max}    {Max}
\DeclareMathOperator*{\ArgMin} {ArgMin}
\DeclareMathOperator*{\ArgMax} {ArgMax}
\DeclareMathOperator{\Abs}     {Abs}
\DeclareMathOperator{\Ln}      {Ln}
\DeclareMathOperator{\Log}     {Log}
\DeclareMathOperator{\Exp}     {Exp}
\DeclareMathOperator{\Cos}     {Cos}
\DeclareMathOperator{\Sin}     {Sin}
\DeclareMathOperator{\Tan}     {Tan}
\DeclareMathOperator{\Sec}     {Sec}
\DeclareMathOperator{\Csc}     {Csc}
\DeclareMathOperator{\Cot}     {Cot}
\DeclareMathOperator{\Cosh}    {Cosh}
\DeclareMathOperator{\Sinh}    {Sinh}
\DeclareMathOperator{\Tanh}    {Tanh}
\DeclareMathOperator{\Sech}    {Sech}
\DeclareMathOperator{\Csch}    {Csch}
\DeclareMathOperator{\Coth}    {Coth}
\DeclareMathOperator{\ArcCos}  {ArcCos}
\DeclareMathOperator{\ArcSin}  {ArcSin}
\DeclareMathOperator{\ArcTan}  {ArcTan}
\DeclareMathOperator{\ArcSec}  {ArcSec}
\DeclareMathOperator{\ArcCsc}  {ArcCsc}
\DeclareMathOperator{\ArcCot}  {ArcCot}
\DeclareMathOperator{\ArcCosh} {ArcCosh}
\DeclareMathOperator{\ArcSinh} {ArcSinh}
\DeclareMathOperator{\ArcTanh} {ArcTanh}
\DeclareMathOperator{\ArcSech} {ArcSech}
\DeclareMathOperator{\ArcCsch} {ArcCsch}
\DeclareMathOperator{\ArcCoth} {ArcCoth}
%
%
%
%
%
% ===================================================================== %
%                          Miscellaneous Commands                       %
% ===================================================================== %
\cs_new:Nn \UWMad_Math_RootWithTail:nn {

    \hbox_set:Nn \l_tmpa_box {
        $
            \mathchoice
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
        $
    }
    %
    \dim_set:Nn \l_tmpa_dim {\box_ht:N \l_tmpa_box}
    \dim_set:Nn \l_tmpb_dim {0.8\l_tmpa_dim}
    %
    \hbox_set:Nn \l_tmpb_box {
        \tex_vrule:D height \l_tmpa_dim depth -\l_tmpb_dim
    }
    %
    \box_use:N \l_tmpa_box
    \box_move_down:nn {0.40pt}{\box_use:N \l_tmpb_box}
}
\DeclareDocumentCommand \Sqrt { O{} m } {
    \UWMad_Math_RootWithTail:nn{#1}{#2}
}
%
%
\DeclareExpandableDocumentCommand \IfMathModeTF { +m +m } {
    \mode_if_math:TF {
        #1
    }{
        $#2$
    }
}
\ExplSyntaxOff
    \DeclareDocumentCommand \subs { O{} +m } {%
        \IfMathModeTF{%
            _{\!\!\:#1\text{\scriptsize #2}}%
        }{%
            _{\!#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \sups { O{} +m } {%
        \IfMathModeTF{%
            ^{#1\text{\scriptsize #2}}%
        }{%
            ^{#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \subsups { O{} +m O{} +m } {%
        \IfMathModeTF{%
            _{#1\text{\scriptsize #2}}^{\!\!\:#3\text{\scriptsize #4}}%
        }{%
            _{#1\text{\scriptsize #2}}^{\!\!\!#3\text{\scriptsize #4}}%
        }%
    }%
\ExplSyntaxOn
%
\DeclareDocumentCommand \OneOver { +m } {
    \frac{1}{#1}
}
\DeclareDocumentCommand \oneo { +m } {
    \OneOver{#1}
}
\DeclareDocumentCommand \dd { m } {
    \mathrm{d}{#1}
}
\DeclareDocumentCommand \dprime { } {
    {\prime\prime}
}
\DeclareDocumentCommand \tprime { } {
    {\prime\prime\prime}
}
\DeclareDocumentCommand \LessThan        { } {<}
\DeclareDocumentCommand \GreaterThanThan { } {>}
%
%    \end{macrocode}
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%  \UWModule{ListOf}
%
%   The ListOf Module is a collection of commands that enables the easy
%   creation and typsetting of Lists.
%
%   Lists are taken to be any collection of entries that is to be typeset
%   with a particular style.  For example, a simple Nomenclature could be
%   considered a list of (symbol, description) entries to be typeset with a
%   fixed style for all entires.  The |ListOf| commands create a system
%   specifically for this scenario.
%
%   Of course, as the commands description will show, lists can be much more
%   complicated that two items.  For the |ListOf| system to function, an
%   author really only needs to define the |ListOf|, create a command to push
%   (enqueue) entries on to the |ListOf| queue, and at some point tell the
%   |ListOf| to typeset the entries it has stored (if display of the content
%   is desired).
%
%
%
%
%   \UWSubModule{ListOf Commands}
%
%   \begin{macro}{\UWMad_ListOf_Define:n}
%   Define a new |ListOf| with \marg{ID}. This command creates the
%   commands to store the section commands and title for each group,
%   the booleans to indicate if the sections should be numbered and
%   if the sections should be included in the table of contentst
%   (regardless of numbering), a hash to hold of the user-defined
%   hooks for the |ListOf|, and a queue to store the entries for
%   typesetting.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_Define:n {
    \tl_const:cn {c__UWMad_ListOf#1_IsDefined_tl}{}
%
    \tl_new:c {g__UWMad_ListOf#1_Section_Main_tl}
    \tl_new:c {g__UWMad_ListOf#1_Section_Group_tl}
    \tl_new:c {g__UWMad_ListOf#1_Section_Subgroup_tl}
%
    \tl_new:c {g__UWMad_ListOf#1_Title_Main_tl}
    \tl_new:c {g__UWMad_ListOf#1_Title_Group_tl}
    \tl_new:c {g__UWMad_ListOf#1_Title_Subgroup_tl}
%
    \bool_new:c       {g__UWMad_ListOf#1_ClearAfterPrint_bool}
    \bool_gset_true:c {g__UWMad_ListOf#1_ClearAfterPrint_bool}
    \bool_new:c       {g__UWMad_ListOf#1_IsNumbered_bool}
    \bool_gset_true:c {g__UWMad_ListOf#1_IsNumbered_bool}
    \bool_new:c       {g__UWMad_ListOf#1_IncludeInTOC_bool}
    \bool_gset_true:c {g__UWMad_ListOf#1_IncludeInTOC_bool}
    \UWMad_Queue_Define:n               {g__ListOf#1_EntryQueue}
    \UWMad_Hash_Define:n                {g__ListOf#1_Hook}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_Delete:n}
%   Simply undefines all of the commands created in the |Define| command
%   above for the given \marg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_Delete:n {
    \cs_undefine:c {c__UWMad_ListOf#1_IsDefined_tl}
%
    \cs_undefine:c {g__UWMad_ListOf#1_Section_Main_tl}
    \cs_undefine:c {g__UWMad_ListOf#1_Section_Group_tl}
    \cs_undefine:c {g__UWMad_ListOf#1_Section_Subgroup_tl}
%
    \cs_undefine:c {g__UWMad_ListOf#1_Title_Main_tl}
    \cs_undefine:c {g__UWMad_ListOf#1_Title_Group_tl}
    \cs_undefine:c {g__UWMad_ListOf#1_Title_Subgroup_tl}
%
    \cs_undefine:c {g__UWMad_ListOf#1_ClearAfterPrint_bool}
    \cs_undefine:c {g__UWMad_ListOf#1_IsNumbered_bool}
    \cs_undefine:c {g__UWMad_ListOf#1_IncludeInTOC_bool}
    \UWMad_Queue_Delete:n   {g__ListOf#1_EntryQueue}
    \UWMad_Hash_Delete:n    {g__ListOf#1_Hook}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_IfDefined:nT}
%   Checks to see if a |ListOf| with \marg{ID} has been created and
%   errors if not.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT
        {c__UWMad_ListOf}
        {#1}
        {_IsDefined_tl}
        {ListOf}
        {#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_MakeNumbered:n}
%   Makes the current section of the |ListOf| with \marg{ID} numbered.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_MakeNumbered:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_set_true:c {g__UWMad_ListOf#1_IsNumbered_bool}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_MakeNotNumbered:n}
%   Makes the current section of the |ListOf| with \marg{ID} unnumbered
%   (it ``stars'' the section).
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_MakeNotNumbered:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_set_false:c {g__UWMad_ListOf#1_IsNumbered_bool}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_IfNumbered:nTF}
%   Branches to \marg{True Code} or \marg{False Code} depending on whether
%   the |ListOf| with \marg{ID} is numbered or not.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_IfNumbered:nTF {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_if:cTF {g__UWMad_ListOf#1_IsNumbered_bool} {
            #2
        }{
            #3
        }
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_IncludeInTOC:n}
%   Makes the current section of the |ListOf| with \marg{ID} appear in
%   the Table of Contents (TOC) regardless of if it is numbered/unnumbered.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_IncludeInTOC:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_set_true:c {c__UWMad_ListOf#1_IncludeInTOC_bool}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_DoNotIncludeInTOC:n}
%   Makes the current section of the |ListOf| with \marg{ID} not appear in
%   the Table of Contents (TOC) regardless of if it is numbered/unnumbered.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_DoNotIncludeInTOC:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_set_false:c {c__UWMad_ListOf#1_IncludeInTOC_bool}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_IfIncludeInTOC:n}
%   Branches to \marg{True Code} or \marg{False Code} depending on whether
%   the |ListOf| with \marg{ID} is to be included or not.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_IfIncludeInTOC:nTF {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \bool_if:cTF {c__UWMad_ListOf#1_IncludeInTOC_bool} {
            #2
        }{
            #3
        }
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_ListOf_SetTitle_Main:nn,
%       \UWMad_ListOf_SetTitle_Group:nn,
%       \UWMad_ListOf_SetTitle_Subgroup:nn}
%   Sets the value of the title of the sections to \marg{Title} for the
%   |ListOf| with \marg{ID}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_SetTitle_Main:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Title_Main_tl}{#2}
    }
}
\cs_new:Nn \UWMad_ListOf_SetTitle_Group:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Title_Group_tl}{#2}
    }
}
\cs_new:Nn \UWMad_ListOf_SetTitle_Subgroup:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Title_Subgroup_tl}{#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_ListOf_GetTitle_Main:nn,
%       \UWMad_ListOf_GetTitle_Group:nn,
%       \UWMad_ListOf_GetTitle_Subgroup:nn}
%   Gets the value of the title of the sections to \marg{Title} for the
%   |ListOf| with \marg{ID}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_GetTitle_Main:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Title_Main_tl}
    }
}
\cs_new:Nn \UWMad_ListOf_GetTitle_Group:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Title_Group_tl}
    }
}
\cs_new:Nn \UWMad_ListOf_GetTitle_Subgroup:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Title_Subgroup_tl}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_ListOf_SetSection_Main:nn,
%       \UWMad_ListOf_SetSection_Group:nn,
%       \UWMad_ListOf_SetSection_Subgroup:nn}
%   Sets the value of the sectioning command for a particular group of the
%   |ListOf| with \marg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_SetSection_Main:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Section_Main_tl}{#2}
    }
}
\cs_new:Nn \UWMad_ListOf_SetSection_Group:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Section_Group_tl}{#2}
    }
}
\cs_new:Nn \UWMad_ListOf_SetSection_Subgroup:nn {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_set:cn {g__UWMad_ListOf#1_Section_Subgroup_tl}{#2}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{
%       \UWMad_ListOf_GetSection_Main:nn,
%       \UWMad_ListOf_GetSection_Group:nn,
%       \UWMad_ListOf_GetSection_Subgroup:nn}
%   Gets the value of the sectioning command for a particular group of the
%   |ListOf| with \marg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_GetSection_Main:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Section_Main_tl}
    }
}
\cs_new:Nn \UWMad_ListOf_GetSection_Group:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Section_Group_tl}
    }
}
\cs_new:Nn \UWMad_ListOf_GetSection_Subgroup:n {
    \UWMad_ListOf_IfDefined:nT {#1} {
        \tl_use:c {g__UWMad_ListOf#1_Section_Subgroup_tl}
    }
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_PushEntry:nn}
%   Pushes \marg{Entry} on to the entry queue of the |ListOf| with \marg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_PushEntry:nn {
    \UWMad_Hash_Get:nn   {g__ListOf#1_Hook}{PrePush}
    \UWMad_Queue_Push:nn {g__ListOf#1_EntryQueue}{#2}
    \UWMad_Hash_Get:nn   {g__ListOf#1_Hook}{PostPush}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_SetHook:nnn}
%   Sets a \marg{HookName} to a \marg{HookCode} for the |ListOf|
%   with \marg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_SetHook:nnn {
    \UWMad_Hash_Set:nnn{g__ListOf#1_Hook}{#2}{#3}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_PrintEntries:n}
%   Prints all entries currently in the |ListOf| queue with \marg{ID} and
%   clears the queue.  The \texttt{PrePrint} and \texttt{PostPrint} hooks
%   are also called here.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_PrintEntries:n {
    \UWMad_Hash_Get:nn   {g__ListOf#1_Hook}{PrePrint}
    \UWMad_Queue_Walk:nn {g__ListOf#1_EntryQueue}{##1}
    \UWMad_Queue_Clear:n {g__ListOf#1_EntryQueue}
    \UWMad_Hash_Get:nn   {g__ListOf#1_Hook}{PostPrint}
}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_PrintTitle:n}
%   Prints all entries currently in the |ListOf| queue with \marg{ID} and
%   clears the queue.  The \texttt{PrePrint} and \texttt{PostPrint} hooks
%   are also called here.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ListOf_CurrentSectioningCommmand:n {}
\cs_new:Nn \UWMad_ListOf_PrintTitle:nn {

    \cs_set_eq:Nc
        \__UWMad_ListOf_CurrentSectioningCommmand:n
        {\tl_use:c{g__UWMad_ListOf#1_Section_#2_tl}}

    \UWMad_ListOf_IfNumbered:nTF {#1} {
        \__UWMad_ListOf_CurrentSectioningCommmand:n
            {\tl_use:c {g__UWMad_ListOf#1_Title_#2_tl}}
    } {
        \UWMad_ListOf_IfIncludeInTOC:nTF {#1} {
            \phantomsection
            \addcontentsline
                {toc}
                {\tl_use:c {g__UWMad_ListOf#1_Section_#2_tl}}
                {\tl_use:c {g__UWMad_ListOf#1_Title_#2_tl}}
        } { }
        \__UWMad_ListOf_CurrentSectioningCommmand:n*
        {\tl_use:c {g__UWMad_ListOf#1_Title_#2_tl}}
    }

}
%    \end{macrocode}
%   \end{macro}
%
%
%
%   \begin{macro}{\UWMad_ListOf_StartGroup:nn}
%   A shortcut command that prints the entires in the current queue
%   and then starts the next section by printing the title.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_StartGroup:nn {
    \UWMad_ListOf_PrintEntries:n{#1}
    \UWMad_ListOf_PrintTitle:nn {#1}{#2}
}
%    \end{macrocode}
%   \end{macro}
%
%
%    \begin{macrocode}
%
%
%
% Nomenclature Environmentment ----------------------------------------------------
%
% Calculated dimensions
\dim_new:N \g__UWMad_Nomenclature_WidestSymbol_dim
\dim_new:N \g__UWMad_Nomenclature_WidestUnit_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_WidthSymbol_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_WidthUnits_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_WidthDescription_dim
%
% Defined dimensions
\dim_new:N \g__UWMad_Nomenclature_TitleSkip_dim
\dim_new:N \g__UWMad_Nomenclature_PrintSkip_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_MarginLeft_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_MarginBottom_dim
\dim_new:N \g__UWMad_Nomenclature_Entry_Padding_dim
%
%
\tl_new:N \g__UWMad_Nomenclature_Section_Main_tl
\tl_new:N \g__UWMad_Nomenclature_Section_Group_tl
\tl_new:N \g__UWMad_Nomenclature_Section_Subgroup_tl
%
\tl_new:N \g__UWMad_Nomenclature_Title_Main_tl
\tl_new:N \g__UWMad_Nomenclature_Title_Group_tl
\tl_new:N \g__UWMad_Nomenclature_Title_Subgroup_tl
%
%
\keys_define:nn { UWMad/Nomenclature } {
%
%   Define dimension keys
    title-skip .dim_gset:N = \g__UWMad_Nomenclature_TitleSkip_dim,
    print-skip .dim_gset:N = \g__UWMad_Nomenclature_PrintSkip_dim,
    entry-margin-left .dim_set:N =
        \g__UWMad_Nomenclature_Entry_MarginLeft_dim,
    entry-margin-bottom .dim_set:N =
        \g__UWMad_Nomenclature_Entry_MarginBottom_dim,
    entry-padding .dim_set:N =
        \g__UWMad_Nomenclature_Entry_Padding_dim,
%
%   Define dimension key defaults
    title-skip          .default:n  = {0.00pt},
    print-skip          .default:n  = {1.00em},
    entry-margin-left   .default:n  = {1.00em},
    entry-margin-bottom .default:n  = {0.25em},
    entry-padding       .default:n  = {0.75em},
%
%   Section setting options
    default-main-section .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Section_Main_tl {#1}
    },
    default-group-section .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Section_Group_tl {#1}
    },
    default-subgroup-section .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Section_Subgroup_tl {#1}
    },
%
%   Section default
    default-main-section .default:n = chapter,
%
%   Title setting options
    default-main-title .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Title_Main_tl {#1}
    },
    default-group-title .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Title_Group_tl {#1}
    },
    default-subgroup-title .code:n = {
        \tl_gset:Nn
            \g__UWMad_Nomenclature_Title_Subgroup_tl {#1}
    },
%
%   Title default
    default-main-title   .default:n = Nomenclature,
%
%   Define other various options
    include-in-toc .bool_gset:N =
        \g__UWMad_Nomenclature_IncludeInTOC_bool,
    with-units .bool_gset:N =
        \g__UWMad_Nomenclature_IncludeUnitsColumn_bool,
%
%   Define other key defaults
    include-in-toc       .default:n = true,
    with-units           .default:n = false
}
%
%   Set defaults
\keys_set:nn { UWMad/Nomenclature } {
    title-skip          ,
    print-skip          ,
    entry-margin-left   ,
    entry-margin-bottom ,
    entry-padding       ,
    include-in-toc      ,
    with-units          ,
    default-main-section,
    default-main-title
}
%
%
%
%
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest:Nn {
    \hbox_set:Nn \l_tmpa_box {#2}
    \dim_set:Nn  \l_tmpa_dim {\box_wd:N \l_tmpa_box}
    \dim_compare:nNnTF {#1} < {\l_tmpa_dim} {
        \dim_gset:Nn #1 {\l_tmpa_dim}
    } { }
}
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest_Symbol:n {
    \UWMad_Nomenclature_UpdateWidest:Nn
        \g__UWMad_Nomenclature_WidestSymbol_dim {#1}
}
%
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest_Units:n {
    \UWMad_Nomenclature_UpdateWidest:Nn
        \g__UWMad_Nomenclature_WidestUnit_dim {#1}
}
%
%
\cs_new:Nn \UWMad_Nomenclature_ZeroWidest_Symbol: {
    \dim_gset:Nn \g__UWMad_Nomenclature_WidestSymbol_dim {0pt}
}
\cs_new:Nn \UWMad_Nomenclature_ZeroWidest_Unit: {
    \dim_gset:Nn \g__UWMad_Nomenclature_WidestUnit_dim {0pt}
}
%
%
%
\cs_new:Nn \UWMad_Nomenclature_SetEntryWidths: {
    % Define Symbol minipage width
    \dim_gset:Nn \g__UWMad_Nomenclature_Entry_WidthSymbol_dim {
        1.01\g__UWMad_Nomenclature_WidestSymbol_dim
    }
    %
    % Define Description minipage width
    \dim_gset:Nn \g__UWMad_Nomenclature_Entry_WidthDescription_dim {
        0.99\textwidth -
        \g__UWMad_Nomenclature_Entry_MarginLeft_dim -
        \g__UWMad_Nomenclature_Entry_WidthSymbol_dim -
        \g__UWMad_Nomenclature_Entry_Padding_dim
    }
}
%
%
%
\cs_new:Nn \UWMad_Nomenclature_Entry:nn {

% Set the entry material in the temporary coffins
    \vcoffin_set:Nnn
        \l_tmpa_coffin
        {\g__UWMad_Nomenclature_Entry_WidthSymbol_dim}
        {#1}
    \vcoffin_set:Nnn
        \l_tmpb_coffin
        {\g__UWMad_Nomenclature_Entry_WidthDescription_dim}
        {#2}
%
% Typeset the material and skips
    \group_begin:
        \setstretch{1.1}
        \skip_horizontal:n {\g__UWMad_Nomenclature_Entry_MarginLeft_dim}
        \coffin_typeset:Nnnnn \l_tmpa_coffin {l}{t}{0pt}{0pt}
        \skip_horizontal:n {\g__UWMad_Nomenclature_Entry_Padding_dim}
        \coffin_typeset:Nnnnn \l_tmpb_coffin {l}{t}{0pt}{0pt}
        \skip_vertical:n {\g__UWMad_Nomenclature_Entry_MarginBottom_dim}
    \group_end:
}
%
%
%
%
\DeclareDocumentEnvironment {Nomenclature} { s o G{Nomenclature} } {
%
    \UWMad_Hash_IfKeySet:nnTF {SectionToLevel}{#2} { } {
        \UWMad@ClassError
            {Nomenclature~environment~received~invalid~section~`#2'}
    }
%
%
    \UWMad_ListOf_Define:n {Nomenclature}
%
    \IfBooleanTF {#1} {
        \UWMad_ListOf_MakeNotNumbered:n {Nomenclature}
    }{
        \UWMad_ListOf_MakeNumbered:n    {Nomenclature}
    }
%
%
%   Set Main section token list
    \IfNoValueTF {#2} { } {
        \tl_gset:Nn \g__UWMad_Nomenclature_Section_Main_tl {#2}
    }
%
%   Set Group section token list
    \tl_if_empty:NTF \g__UWMad_Nomenclature_Section_Group_tl {
        \tl_gset:Nn \g__UWMad_Nomenclature_Section_Group_tl {
            \UWMad_Hash_Get:nn{NextSectioningCommand} {
                \g__UWMad_Nomenclature_Section_Main_tl
            }
        }
    } { }
%
%   Set Subgroup section token list
    \tl_if_empty:NTF \g__UWMad_Nomenclature_Section_Subgroup_tl {
        \tl_gset:Nn \g__UWMad_Nomenclature_Section_Subgroup_tl {
            \UWMad_Hash_Get:nn{NextSectioningCommand} {
                \g__UWMad_Nomenclature_Section_Group_tl
            }
        }
    } { }
%
%   Set the sections with the ListOf
    \UWMad_ListOf_SetSection_Main:nn
        {Nomenclature} {\g__UWMad_Nomenclature_Section_Main_tl}
    \UWMad_ListOf_SetSection_Group:nn
        {Nomenclature} {\g__UWMad_Nomenclature_Section_Group_tl}
    \UWMad_ListOf_SetSection_Subgroup:nn
        {Nomenclature} {\g__UWMad_Nomenclature_Section_Subgroup_tl}
%
%
    \DeclareDocumentCommand \Entry { m m } {
        \UWMad_ListOf_PushEntry:nn {Nomenclature} {
            \UWMad_Nomenclature_Entry:nn
                {##1}
                {##2}
        }
        \UWMad_Nomenclature_UpdateWidest_Symbol:n{##1}
    }

    \DeclareDocumentCommand  \ResetColumnWidth { } {
        \UWMad_Nomenclature_ZeroWidest_Symbol:
    }
%
%
%
    \UWMad_ListOf_SetHook:nnn {Nomenclature} {PrePrint} {
        \UWMad_Nomenclature_SetEntryWidths:
    }
    \UWMad_ListOf_SetHook:nnn {Nomenclature} {PostPrint} {
        \UWMad_Nomenclature_ZeroWidest_Symbol:
    }
    \UWMad_ListOf_SetTitle_Main:nn {Nomenclature}{#3}
    \UWMad_ListOf_PrintTitle:nn {Nomenclature}{Main}
%
%
%
    \DeclareDocumentCommand \Group { s G{} } {
        \IfBooleanTF {##1} {
            \UWMad_ListOf_MakeNotNumbered:n {Nomenclature}
        }{
            \UWMad_ListOf_MakeNumbered:n    {Nomenclature}
        }
        \UWMad_ListOf_SetTitle_Group:nn {Nomenclature}{##2}
        \UWMad_ListOf_StartGroup:nn{Nomenclature}{Group}
    }
%
%
    \DeclareDocumentCommand \SubGroup { s G{} } {
        \IfBooleanTF {##1} {
            \UWMad_ListOf_MakeNotNumbered:n {Nomenclature}
        }{
            \UWMad_ListOf_MakeNumbered:n    {Nomenclature}
        }
        \UWMad_ListOf_SetTitle_Subgroup:nn {Nomenclature}{##2}
        \UWMad_ListOf_StartGroup:nn{Nomenclature}{Subgroup}
    }
%
}{
    \UWMad_ListOf_PrintEntries:n {Nomenclature}
    \UWMad_ListOf_Delete:n{Nomenclature}
}
%
%
\DeclareDocumentEnvironment {Acronym} { s O{chapter} G{Acronym} } {

    \IfBooleanTF {#1} {
        \begin{Nomenclature*}[#2]{#3}
    } {
        \begin{Nomenclature}[#2]{#3}
    }

    \cs_undefine:N \Entry
    \DeclareDocumentCommand \Entry { o m m } {

        \IfNoValueTF {##1} {
            \UWMad_ListOf_PushEntry:nn {Nomenclature} {
                \hypertarget{Acronym:##2}{}
                \UWMad_Nomenclature_Entry:nn
                    {##2}
                    {##3}
            }
        } {
            \UWMad_ListOf_PushEntry:nn {Nomenclature} {
                \hypertarget{Acronym:##1}{}
                \UWMad_Nomenclature_Entry:nn
                    {##2}
                    {##3}
            }
        }
        \UWMad_Nomenclature_UpdateWidest_Symbol:n{##2}
    }
} {
    \end{Nomenclature}
}

\DeclareDocumentCommand \Acro { m } {
    \hyperlink{Acronym:#1}{#1}
}
%
%
%
%
\cs_new:cpn      {Nomenclature*} {\Nomenclature*}
\cs_new_eq:cN {endNomenclature*} \endNomenclature
\cs_new:cpn      {Acronym*} {\Acronym*}
\cs_new_eq:cN {endAcronym*} \endAcronym
%
%
%
%    \end{macrocode}
%
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%^^A ------------------------------------------------------------------------ %
%^^A                    Metadata Writing/Importing Routines                   %
%^^A ------------------------------------------------------------------------ %
%
%   \UWModule{PDF and Other Metadata}
%
%   Since the metadata (i.e., properties) of a PDF must be set in the preamble
%   but typically a user defines them in the document, these routines write the
%   supported metadata that a user may define to an auxiliary file that is
%   then imported upon recompilation.  It uses the CSV commands above to define
%   and build the CSV list, and then uses the TeX |\write| to dump it to the file.
%
%
% Used to determine is the list was created
%
%    \begin{macrocode}
%
% Command used to append the data to the CSV list.  It is called in the
% metadata commands below
\UWMad_CSV_Define:n {MetaDataList}
\cs_new:Nn \UWMad_MetaData_PushToList:nn {
   \UWMad_CSV_Append:nn {MetaDataList}{#1={#2}}
}

\bool_new:N \g__UWMad_MetaData_GenerateAux_bool
\bool_new:N \g__UWMad_MetaData_IsDocument_bool

\file_if_exist:nTF{\jobname.UWMad.PDFMetaData.aux} {
    \file_input:n {\jobname.UWMad.PDFMetaData.aux}
}{}

\AtBeginDocument{
    \UWMad_CSV_IfNotEmpty:nTF{MetaDataList} {
        \exp_args:Nx \hypersetup {\UWMad_CSV_Get:n{MetaDataList}}
    } { }
    \bool_gset_true:N \g__UWMad_MetaData_IsDocument_bool
}
\AtEndDocument{
    \bool_if:NTF \g__UWMad_MetaData_GenerateAux_bool {
        \UWMad_CSV_IfNotEmpty:nTF {MetaDataList} {
            \iow_new:N   \g__UWMad_PDFMetaData_HyperSetup_io
            \iow_open:Nn \g__UWMad_PDFMetaData_HyperSetup_io {
                \jobname.UWMad.PDFMetaData.aux
            }
            \iow_now:Nx  \g__UWMad_PDFMetaData_HyperSetup_io {
                \noexpand\ExplSyntaxOff
                    \noexpand\hypersetup{\UWMad_CSV_Get:n{MetaDataList}}
                \noexpand\ExplSyntaxOn
            }
            \iow_close:N \g__UWMad_PDFMetaData_HyperSetup_io
        } { }
    } { }
}



% ------------------------------------------------------------------------ %
%           Metadata Defining/Storing Commands (User's Interface)          %
% ------------------------------------------------------------------------ %
%
\tl_new:N \g__UWMad_ThesisInfo_Title_tl
\tl_new:N \g__UWMad_ThesisInfo_Author_tl
\tl_new:N \g__UWMad_ThesisInfo_DefenseDate_tl
\tl_new:N \g__UWMad_ThesisInfo_Department_tl
\tl_new:N \g__UWMad_ThesisInfo_Program_tl
\tl_new:N \g__UWMad_ThesisInfo_Degree_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorName_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorPosition_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorAssociation_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorMarker_tl
\tl_new:N \g__UWMad_ThesisInfo_Institution_tl
%
%
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Title_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Author_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_DefenseDate_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Program_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Institution_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
%
%
%
%   User front-ends (Required)
\DeclareDocumentCommand \Title { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Title_tl {#1}
    \title{#1}
    \UWMad_MetaData_PushToList:nn{pdftitle}    {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Title_bool
}
\DeclareDocumentCommand \Author { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Author_tl {#1}
    \author{#1}
    \UWMad_MetaData_PushToList:nn{pdfauthor}   {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Author_bool
}
\DeclareDocumentCommand \Program { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Program_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Program_bool
}
\DeclareDocumentCommand \Degree { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Degree_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
}
\DeclareDocumentCommand \DefenseDate { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DefenseDate_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_DefenseDate_bool
}
\cs_gset_eq:NN \DefenceDate \DefenseDate
\cs_gset_eq:NN \Date        \DefenseDate
\DeclareDocumentCommand \Institution { m } {
    \tl_gset:Nn       \g__UWMad_ThesisInfo_Institution_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Institution_bool
}
\cs_set_eq:NN \University \Institution
%
%
%   User front-ends (Optional)
\DeclareDocumentCommand \Department { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Department_tl {#1}
}
\DeclareDocumentCommand \Advisor { m m m } {
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorName_tl        {#1}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorPosition_tl    {#2}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorAssociation_tl {#3}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorMarker_tl      {Advisor}
 }
\DeclareDocumentCommand \Adviser { m m m } {
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorName_tl        {#1}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorPosition_tl    {#2}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorAssociation_tl {#3}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorMarker_tl      {Adviser}
}
%
%
%
%
%   User front-end accessors
\DeclareDocumentCommand \TheTitle { } {
    \g__UWMad_ThesisInfo_Title_tl
}
\DeclareDocumentCommand \TheAuthor { } {
    \g__UWMad_ThesisInfo_Author_tl
}
\DeclareDocumentCommand \TheProgram { m } {
    \g__UWMad_ThesisInfo_Program_tl
}
\DeclareDocumentCommand \TheDegree { m } {
    \g__UWMad_ThesisInfo_Degree_tl
}
\DeclareDocumentCommand \TheDefenseDate { m } {
    \g__UWMad_ThesisInfo_DefenseDate_tl
}
\cs_gset_eq:NN \TheDefenceDate \TheDefenseDate
\cs_gset_eq:NN \TheDate        \TheDefenseDate
\DeclareDocumentCommand \TheInstitution { m } {
    \g__UWMad_ThesisInfo_Institution_tl
}
\cs_set_eq:NN \TheUniversity \TheInstitution
%
\DeclareDocumentCommand \TheDepartment { m } {
    \g__UWMad_ThesisInfo_Department_tl
}
\DeclareDocumentCommand \TheAdvisor { m } {
    \g__UWMad_ThesisInfo_AdvisorName_tl
}
%
%
%
\int_new:N \l__UWMad_ThesisInfo_CommitteeCount_int
\UWMad_ListOf_Define:n {CommitteeList}
\DeclareDocumentCommand \CommitteeMember { m m m } {
    \int_incr:N \l__UWMad_ThesisInfo_CommitteeCount_int
    \UWMad_ListOf_PushEntry:nn {CommitteeList} {
        #1,~#2,~#3\skip_vertical:n{-1em}
    }
}
\DeclareDocumentCommand \PrintCommitteeMemberList { } {
    \bool_if:NTF \g__UWMad_ThesisInfo_IsSet_Advisor_bool {
        \g__UWMad_ThesisInfo_AdvisorName_tl{},~
        \g__UWMad_ThesisInfo_AdvisorPosition_tl{},~
        \g__UWMad_ThesisInfo_AdvisorAssociation_tl{}~
        (\g__UWMad_ThesisInfo_AdvisorMarker_tl{})
        \skip_vertical:n{-1em}
    } { }
    \UWMad_ListOf_PrintEntries:n {CommitteeList}
}
%
%
%
%
%
\tl_new:N \g__UWMad_PDFMetaData_Subject_tl
\tl_new:N \g__UWMad_PDFMetaData_Keywords_tl
\tl_new:N \g__UWMad_PDFMetaData_Producer_tl
\tl_new:N \g__UWMad_PDFMetaData_Creator_tl
%
%
%
%   User front-end (Optional)
\DeclareDocumentCommand \Subject { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Subject_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfsubject}  {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Keywords { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Keywords_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfproducer} {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Producer { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Producer_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfcreator}  {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Creator { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Creator_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfkeywords} {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
%
%
%
%   User front-end accessors.
\DeclareDocumentCommand \TheSubject { } {
    \g__UWMad_PDFMetaData_Subject_tl
}
\DeclareDocumentCommand \TheKeywords { } {
    \g__UWMad_PDFMetaData_Keywords_tl
}
\DeclareDocumentCommand \TheProducer { } {
    \g__UWMad_PDFMetaData_Producer_tl
}
\DeclareDocumentCommand \TheCreator { } {
    \g__UWMad_PDFMetaData_Creator_tl
}
%
%    \end{macrocode}
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%^^A ====================================================================== %
%^^A                            Title Page                                  %
%^^A ====================================================================== %
%
%   \UWModule{Special Pages}
%
%   \UWSubModule{MakeTitlePage}
%
%    \begin{macrocode}
% That phrase that occurs on every title page design the class author has seen
\DeclareDocumentCommand \FulfillmentClause { } {
    {
    \setstretch{1.1}
    A~\TheDocument{}~submitted~in~partial~fulfillment~of~the~
    requirements~for~the~degree~of
    }
}

\DeclareDocumentCommand \TitlePageTitle { } {
    {
        \huge
        \textsc {\TheTitle{}}
    }
}

\DeclareDocumentCommand \TitlePageAuthor { } {
    {
        \large
        by  \\[0.50em]
        \TheAuthor{}
    }
}

\DeclareDocumentCommand \TitlePageFulFillment { } {
    \FulfillmentClause{}
}

\DeclareDocumentCommand \TitlePageDegree { } {
    \TheDegree{}
}

\DeclareDocumentCommand \TitlePageProgram { } {
    \TheProgram{}
}

\DeclareDocumentCommand \TitlePageInstitution { } {
    \textsc{\TheInstitution{}}
}


\DeclareDocumentCommand \MakeTitlePage { } {
    \thispagestyle{empty}
    \begin{center}
        \TitlePageTitle{}       \\[1.0em]
        \TitlePageAuthor{}      \\[1.0em]
        \TitlePageFulFillment{} \\[1.0em]
        \TitlePageDegree{}      \\[1.0em]
        \TitlePageProgram{}     \\[1.0em]
        \vfill
        \TitlePageInstitution{}
    \end{center}
    \clearpage
}

\show\title








%^^A ====================================================================== %
%^^A                            License Page                                %
%^^A ====================================================================== %
%
% Full Copyright
\newcommand{\AllRightsReserved}{
    \large
    \copyright{} Copyright by \TheLicenseAuthor(\the\year)\\
    All Rights Reserved
}
\cs_gset_eq:NN \Copyright \AllRightsReserved
%
%
%
%
%
%^^A ====================================================================== %
%^^A                       Creative Commons Licenses                        %
%^^A ====================================================================== %
%
%   Token lists
\tl_new:N    \g__UWMad_CCLicense_Porting_tl
\tl_new:N    \g__UWMad_CCLicense_Version_tl
\tl_new:N    \g__UWMad_CCLicense_TypeAbbreviation_tl
\tl_new:N    \g__UWMad_CCLicense_TypeWords_tl
\tl_new:N    \g__UWMad_CCLicense_URL_Front_tl
\tl_new:N    \g__UWMad_CCLicense_URL_Middle_tl
\tl_new:N    \g__UWMad_CCLicense_URL_Back_tl
\tl_new:N    \g__UWMad_CCLicense_URL_tl
\tl_const:Nn \g__UWMad_CCLicense_Valid_Prefix {__UWMad_CCLicense_Valid_}
%
%   Booleans
\bool_new:N \g__UWMad_CCLicense_UseCreativeCommons_bool
\bool_new:N \g__UWMad_CCLicense_UseAttribution_bool
\bool_new:N \g__UWMad_CCLicense_UseShareAlike_bool
\bool_new:N \g__UWMad_CCLicense_UseNoDerivatives_bool
\bool_new:N \g__UWMad_CCLicense_UseNonCommercial_bool
\bool_new:N \g__UWMad_CCLicense_IsValid_bool
\bool_gset_true:N \g__UWMad_CCLicense_UseAttribution_bool
%
%   Valid license types
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by :}      {}
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by-sa :}   {}
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by-nd :}   {}
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by-nc :}   {}
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by-nc-sa :}{}
\cs_new:cn {\g__UWMad_CCLicense_Valid_Prefix by-nc-nd :}{}
%
%   Defaults
\tl_gset:Nn \g__UWMad_CCLicense_Porting_tl {
    International
}
\tl_gset:Nn \g__UWMad_CCLicense_Version_tl {
    4.0
}
%
%   URL definitions
\tl_gset:Nn \g__UWMad_CCLicense_URL_Front_tl {
    creativecommons.org/licenses/
}
\tl_gset:Nn \g__UWMad_CCLicense_URL_Middle_tl {
    \g__UWMad_CCLicense_TypeAbbreviation_tl/
}
\tl_gset:Nn \g__UWMad_CCLicense_URL_Back_tl {
    \g__UWMad_CCLicense_Version_tl
}
\tl_gset:Nn \g__UWMad_CCLicense_URL_tl {
    http://
    \g__UWMad_CCLicense_URL_Front_tl
    \g__UWMad_CCLicense_URL_Middle_tl
    \g__UWMad_CCLicense_URL_Back_tl
}
%
%
%
%   Type Creator
\cs_new:Nn \__UWMad_CCLicense_CreateType: {

        \bool_if:NTF \g__UWMad_CCLicense_UseAttribution_bool {

            \tl_put_right:Nn \g__UWMad_CCLicense_TypeAbbreviation_tl {
                by
            }
            \tl_put_right:Nn \g__UWMad_CCLicense_TypeWords_tl {
                Attribution
            }

        } { }

        \bool_if:NTF \g__UWMad_CCLicense_UseNonCommercial_bool {

            \tl_put_right:Nn \g__UWMad_CCLicense_TypeAbbreviation_tl {
                -nc
            }
            \tl_put_right:Nn \g__UWMad_CCLicense_TypeWords_tl {
                -NonCommercial
            }

        } { }

        \bool_if:NTF \g__UWMad_CCLicense_UseShareAlike_bool {

            \tl_put_right:Nn \g__UWMad_CCLicense_TypeAbbreviation_tl {
                -sa
            }
            \tl_put_right:Nn \g__UWMad_CCLicense_TypeWords_tl {
                -ShareAlike
            }

        } { }

        \bool_if:NTF \g__UWMad_CCLicense_UseNoDerivatives_bool {

            \tl_put_right:Nn \g__UWMad_CCLicense_TypeAbbreviation_tl {
                -nd
            }
            \tl_put_right:Nn \g__UWMad_CCLicense_TypeWords_tl {
                -NoDerivatives
            }

        } { }
}
%
%
%
%   Type Validator
\cs_new:Nn \__UWMad_CCLicense_CheckTypeValidity: {
    \cs_if_exist:cTF {
        \g__UWMad_CCLicense_Valid_Prefix
        \g__UWMad_CCLicense_TypeAbbreviation_tl :
    } {

        \bool_gset_true:N \g__UWMad_CCLicense_IsValid_bool

    } {

        \msg_new:nnn {UWMadThesis} {CCLicense / InvalidLicenseType} {
            The~license~type~`\g__UWMad_CCLicense_TypeAbbreviation_tl'~
            is~not~a~valid~Creative~Commons~license.
        }
        \msg_error:nn {UWMadThesis} {CCLicense / InvalidLicenseType}

    }
}
%
%
%
%   Page Printer
\cs_new:Nn \__UWMad_CCLicense_PrintPage: {

    {
        \clearpage
        \thispagestyle{empty}
        \null
        \tex_vfill:D
        \phantomsection
        \addcontentsline {toc} {chapter} {License}
        \begin{center}
            \Large
            \iffalse
            This~work~is~released~under~a~
            Creative~Commons~
            \g__UWMad_CCLicense_TypeWords_tl{}~
            \g__UWMad_CCLicense_Version_tl{}~
            \g__UWMad_CCLicense_Porting_tl{}~
            license.\\[0.1em]

            (\g__UWMad_CCLicense_URL_tl{})
            \fi

            This~work~is~released~under~a~
            \href {\g__UWMad_CCLicense_URL_tl} {
                Creative~Commons~
                \g__UWMad_CCLicense_TypeWords_tl{}~
                \g__UWMad_CCLicense_Version_tl{}~
                \g__UWMad_CCLicense_Porting_tl{}
            }~
            license.\\[0.1em]

            (\g__UWMad_CCLicense_URL_tl{}/)
        \end{center}
    }
}
%
%
%   User front ends
\DeclareDocumentCommand \CreativeCommons { } {
    \bool_gset_true:N \g__UWMad_CCLicense_UseCreativeCommons_bool
}
\DeclareDocumentCommand \NonCommercial { } {
    \bool_gset_true:N \g__UWMad_CCLicense_UseNonCommercial_bool
}
\DeclareDocumentCommand \ShareAlike { } {
    \bool_gset_true:N \g__UWMad_CCLicense_UseShareAlike_bool
}
\DeclareDocumentCommand \NoDerivatives { } {
    \bool_gset_true:N \g__UWMad_CCLicense_UseNoDerivatives_bool
}
%
%
%
%
%
%^^A ====================================================================== %
%^^A                        License Page environment                        %
%^^A ====================================================================== %
\DeclareDocumentEnvironment {LicensePage} { } { } {

    \bool_if:NTF \g__UWMad_CCLicense_UseCreativeCommons_bool {
        \__UWMad_CCLicense_CreateType:
        \__UWMad_CCLicense_CheckTypeValidity:
        \bool_if:NTF \g__UWMad_CCLicense_IsValid_bool {
            \__UWMad_CCLicense_PrintPage:
        } { }
    } { }

}

%    \end{macrocode}
%
%
%
%   \iffalse
%</Code>
%   \fi
%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}
%
%   \Finale
\endinput
